/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 10.04.2025 08:37:06

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038801846094429493, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 26128, -40287, -42082, -34120, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00019624030392151326, 0.00014473717601504177, 0.00014051994367036968, 0.00018174457363784313, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 28,-38,-78,-48,127,-14,-39,-48,109,-6,105,97,-77,-27,41,-18,1,-56,-92,35,36,100,12,90,15,22,-13,48,62,-29,43,26, 
  /* [1][0][][] */ 56,81,-87,-32,-31,37,120,40,-31,-57,-113,62,95,-69,116,-115,127,-108,18,-39,11,-54,-68,13,-25,-75,62,-92,-53,-125,-43,-36, 
  /* [2][0][][] */ -47,104,36,73,-23,-22,97,39,-64,-98,97,-42,-111,97,-127,96,54,90,70,-58,-55,24,-12,0,25,-26,82,-82,-12,15,66,67, 
  /* [3][0][][] */ 64,-68,84,13,0,95,22,-1,15,-103,19,82,68,-14,-127,-13,97,-115,77,-24,-99,-44,-21,-8,76,-23,-102,92,-82,116,25,45, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0039663040079176426, 0.0029253503307700157, 0.0028401138260960579, 0.0036733241286128759, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 4, -66, -2310, -338, -967, -130, -162, -240, -1304, -860, 911, -1702, -156, -62, 1926, -697, 10, -234, -860, -1166, -331, -590, -549, -1513, -270, -1102, 24, -1533, 2494, -1263, -1158, -490, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.8933226935332641e-05, 4.9765480071073398e-05, 5.6497385230613872e-05, 5.7955126976594329e-05, 4.8263460485031828e-05, 4.3435047700768337e-05, 4.4253803935134783e-05, 4.6212677261792123e-05, 5.2758663514396176e-05, 5.1042094128206372e-05, 5.0649403419811279e-05, 5.4811753216199577e-05, 5.6612367188790813e-05, 7.2156923124566674e-05, 5.1538227126002312e-05, 5.4154843383003026e-05, 4.2486026359256357e-05, 5.6508684792788699e-05, 5.0366983487037942e-05, 4.9670052248984575e-05, 7.773256947984919e-05, 7.3248549597337842e-05, 8.4402163338381797e-05, 5.4898315283935517e-05, 4.8476969823241234e-05, 5.0535814807517454e-05, 5.479072206071578e-05, 5.4247921070782468e-05, 5.4611711675534025e-05, 5.3501251386478543e-05, 4.9166985263582319e-05, 5.6757180573185906e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -24,-30,100,4,84,-31,-77,-70,-20,-84,-89,15,57,9,-24,64,-51,-27,-76,-55,-73,-78,-17,98,-80,5,80,-37,108,8,-20,-68,64,-50,-76,54,-104,-82,-76,37,66,-87,-93,90,26,-82,104,-19,31,-45,-63,52,-68,-26,-88,97,10,63,107,-96,-76,73,-57,38,-13,11,76,91,51,81,70,-106,96,-127,50,69,-94,11,-64,19,43,2,51,-16,-38,-25,-95,81,19,71,-7,-93,17,65,-6,-22, 
  /* [1][0][][] */ -50,-12,-86,10,-24,37,47,7,15,-69,-111,97,57,-25,20,28,93,-28,44,127,-62,-16,52,45,9,30,-27,78,24,-48,94,-74,60,89,19,11,60,62,-33,-34,-62,8,-5,-101,-28,20,-4,-46,0,-54,98,13,22,-6,-66,-27,6,105,64,31,-49,78,-87,-48,-43,-5,70,10,79,51,5,26,-99,84,-52,28,60,-13,-32,49,-65,53,-14,-89,-27,98,-53,-61,59,60,67,27,75,20,34,-10, 
  /* [2][0][][] */ 60,-25,-75,36,-46,-38,40,79,-127,94,-33,78,74,-14,59,-48,-65,-4,64,9,-127,-40,59,-16,-55,80,88,-25,-117,85,98,67,-112,7,-125,-93,-91,45,115,-35,-68,-67,-16,-7,-79,87,9,-91,78,-16,33,-96,-63,77,29,-26,-37,52,-73,2,-45,31,25,29,67,36,34,81,-93,25,-15,-81,50,-68,45,-11,-77,-46,-39,-34,-13,-119,-5,-75,13,-126,9,-36,37,63,-12,-14,-80,-39,-70,-87, 
  /* [3][0][][] */ 58,-41,11,-14,-64,6,-97,25,-19,13,35,-10,64,68,42,2,55,60,-35,21,39,-85,-35,-107,-77,-81,-60,46,29,-93,69,-17,-68,-27,-3,-40,-92,-17,25,26,-35,-65,-67,-20,44,1,-22,-66,23,-61,10,-55,71,-1,64,-70,-127,-94,-85,-72,-119,-2,-40,63,44,-49,-52,-41,-35,-42,-12,78,13,-76,36,-64,-32,54,73,-61,-72,-116,50,57,11,20,-33,-125,-73,22,1,-95,34,-98,-70,8, 
  /* [4][0][][] */ 28,67,-19,27,-49,-45,2,-10,51,57,-27,25,3,-49,-34,-82,-46,-28,-79,-13,76,-101,57,-1,-33,-26,32,-77,-66,6,-80,-70,39,80,-8,-114,-70,-30,-125,16,-52,-71,-43,-105,5,86,9,26,-5,-56,-41,-91,-103,16,-88,0,8,-108,13,-9,-19,-90,-58,-84,-66,27,-24,-56,0,-114,-100,-99,-71,-7,65,26,32,-46,-29,-72,-17,-52,-111,49,-19,41,111,-24,-127,-92,17,16,4,66,-113,-31, 
  /* [5][0][][] */ 104,-77,79,73,39,-127,24,77,40,-109,-1,-54,31,91,45,58,62,71,-80,95,12,51,1,-24,-108,-65,5,-86,52,43,12,-90,-58,9,-67,10,-112,-47,57,44,-92,-68,29,106,-45,32,49,-53,-60,95,-6,-23,34,36,35,-22,85,56,-60,-39,21,-62,34,-77,-32,99,-9,39,78,4,89,-71,-35,53,-11,-82,6,-40,8,69,95,15,12,77,-69,90,-40,44,54,-125,121,98,-19,37,47,-111, 
  /* [6][0][][] */ 16,-78,105,82,-76,-106,7,78,-88,-71,-7,-71,82,43,114,-114,40,0,5,117,-88,-127,118,70,-82,-71,1,-73,-7,-121,51,-83,-91,-119,-22,-116,-4,44,-112,95,82,57,33,-28,-121,101,-68,-43,-86,34,-38,-123,68,-76,94,-13,-14,6,-57,80,-93,-11,47,-52,-45,44,110,-56,74,18,-119,8,54,-67,-88,-43,-98,-78,-59,-41,35,-44,65,-4,-90,-74,-39,-88,68,75,90,23,-45,-105,80,-31, 
  /* [7][0][][] */ 109,46,-55,-33,-61,77,-8,7,46,19,-109,24,51,-89,44,62,50,23,8,127,25,18,12,98,-84,105,50,41,-60,77,-12,20,22,20,84,77,-87,87,-24,-2,82,-70,90,52,44,-11,118,-105,82,-36,-111,-106,-13,36,16,40,89,-67,14,-87,4,-21,49,-87,-61,-78,70,5,-110,45,45,92,80,24,51,42,-74,76,-95,24,84,-60,10,-59,54,32,-100,88,63,-12,70,68,-51,-82,3,-71, 
  /* [8][0][][] */ -19,3,-65,-103,20,7,-88,-50,0,1,8,50,-27,-67,-98,-94,-83,49,-85,-20,-2,-49,30,62,-122,46,2,34,-86,-14,-104,73,49,-54,5,-29,63,-32,-51,30,46,55,-118,-124,-34,-49,-54,50,-1,-106,-82,-6,-85,-24,-54,-120,17,58,-114,65,62,11,8,57,-61,-58,-49,56,-98,11,-4,-32,32,22,-26,-6,-64,59,33,28,-3,41,-127,-93,-9,1,29,-71,-1,-66,-100,54,-91,-98,-66,26, 
  /* [9][0][][] */ -20,-10,85,21,46,-84,-66,-127,85,16,-23,21,-43,-85,-107,-47,-19,-25,-109,-81,18,64,-99,-109,77,-32,-33,16,-36,-74,-100,67,33,-20,0,-35,-68,-10,-45,-65,23,-75,46,-94,58,7,-117,24,18,-33,-80,-2,43,-89,-84,64,54,-75,80,-20,-87,68,48,-92,-95,-5,62,15,-54,65,80,-95,-19,46,-114,-95,-66,-120,-15,76,13,8,63,105,-59,-99,57,60,69,21,-49,73,74,-10,64,-49, 
  /* [10][0][][] */ -30,52,28,-36,11,103,119,42,-18,60,38,-82,99,78,-15,32,-64,96,-48,-40,-59,6,61,-93,-38,75,-79,-87,-50,70,-54,-37,77,109,118,92,-7,25,-3,29,-4,115,-67,-17,-73,-94,25,-40,13,23,66,84,66,29,-27,-17,-56,-1,22,-62,-30,40,114,60,127,-58,-64,-3,30,-1,-83,-33,95,69,-48,73,-55,16,47,46,71,19,87,119,-72,12,105,-52,35,45,9,-72,-69,20,-35,-64, 
  /* [11][0][][] */ 69,28,9,35,38,-17,-11,32,52,28,-100,56,-28,-84,19,-34,-70,-121,1,3,7,83,-12,-125,-103,-127,-57,20,52,-7,-25,-67,-107,-96,15,-16,-106,36,-37,-66,-65,43,-76,-35,-47,-43,-72,-94,33,68,28,-16,-118,-63,-39,1,-87,-95,-60,-68,-90,53,13,-43,-33,44,-37,24,60,16,-100,-105,-9,65,-61,7,-108,12,-23,69,-101,-64,-107,-79,66,-56,-26,-41,-72,-38,17,-102,-84,-88,-89,-45, 
  /* [12][0][][] */ 2,73,-24,0,67,3,-32,54,-92,-1,-13,38,-24,-27,54,-32,-52,-13,-76,-51,28,15,6,93,-18,-91,105,-62,84,29,-61,96,-87,-56,-37,10,14,-74,-2,59,50,11,-72,-17,-19,-26,-27,101,13,-127,-82,68,34,21,-78,57,-57,-30,56,52,63,100,-7,17,84,28,-10,105,57,89,25,53,76,66,8,8,-9,52,-75,-79,-38,54,-1,-14,-17,52,7,112,-89,-103,79,50,93,-2,17,36, 
  /* [13][0][][] */ 81,-76,7,58,66,37,59,32,0,-38,6,-38,60,48,36,-37,-103,-22,-20,30,9,-38,85,-31,-78,43,14,-24,-55,-106,68,11,26,76,4,4,-67,-11,7,32,-24,55,-42,-20,-20,8,22,-18,33,76,-16,-102,-51,-10,71,-35,-18,19,-9,-64,-66,25,-56,26,-19,-53,-95,28,-71,-10,53,14,-46,27,-48,-68,-127,31,38,-47,17,-71,86,16,-55,-84,71,46,-7,-30,-57,16,28,-44,45,-25, 
  /* [14][0][][] */ -42,-45,117,103,98,-15,24,-54,-79,-37,54,106,10,-44,-45,-61,-17,-81,-4,38,-29,71,-4,79,-110,-53,-41,54,-42,-60,-60,53,127,6,17,34,45,107,19,-70,-13,-89,82,88,61,-93,37,-120,83,51,41,65,118,7,19,54,-59,41,26,57,19,-38,-51,94,-105,14,111,-52,-34,-41,-71,108,27,54,73,-19,61,-115,60,-7,89,14,-127,18,-96,-83,-115,85,108,-48,99,-10,118,86,-9,65, 
  /* [15][0][][] */ 39,-51,-44,52,69,-86,46,-89,11,36,-52,7,68,18,-93,-114,49,-7,-40,-1,7,-16,39,69,27,84,6,51,0,19,77,-95,4,2,-62,5,-76,100,70,-77,61,92,-63,-41,1,-97,-7,-91,-32,-45,-12,5,-86,-113,-27,-5,99,24,-60,75,-59,-73,-33,87,-50,58,-78,-19,-71,-15,22,-62,2,-1,27,-99,-26,22,50,37,-82,62,-80,-31,-111,-62,-34,6,56,34,-117,-48,41,127,-93,87, 
  /* [16][0][][] */ -60,9,100,-54,52,93,-42,62,-11,66,-112,91,-2,-50,-41,-47,114,94,78,84,97,82,-28,70,-40,67,-46,68,-85,19,48,15,-107,86,78,55,-23,59,-48,-41,23,-48,82,95,60,108,126,-9,-11,-92,-5,68,-32,121,73,59,13,109,78,2,118,109,23,78,63,7,-19,98,48,121,-39,4,41,88,76,81,-10,123,-104,-24,16,-104,77,21,14,113,97,16,72,-4,-13,127,79,-35,-82,14, 
  /* [17][0][][] */ 55,-125,-26,62,-5,-83,-14,-67,-33,-29,77,44,93,70,-79,18,25,79,127,90,-111,-12,30,-32,-30,95,-76,-22,83,-87,14,61,-4,12,66,8,-56,81,-83,-24,-45,-5,-16,-39,-4,-15,105,-90,66,112,26,-8,-9,44,103,-26,-69,86,-55,-84,-6,-105,32,115,-36,-73,7,-93,-96,5,85,56,36,-92,-50,16,44,-46,-9,-79,-30,-4,-21,-53,-63,27,94,-57,11,42,-91,-83,-15,69,38,-13, 
  /* [18][0][][] */ -91,70,77,-80,-26,-118,-107,-1,-43,33,-100,-55,-45,-3,35,-46,5,-34,8,-43,59,-63,5,-82,-21,-105,-26,79,11,15,-14,20,8,-38,-108,-118,-45,0,-42,42,-53,-37,-77,-24,-127,-3,2,-39,25,-38,26,-16,-109,-22,-34,56,-84,16,-40,-104,46,74,-12,11,-78,-118,-37,65,42,-103,-101,74,-94,-72,-80,-107,20,35,-12,-116,-67,-40,-56,-106,71,-48,26,47,-124,-94,-77,76,52,-80,1,-74, 
  /* [19][0][][] */ -7,9,40,8,25,-99,58,53,62,-78,2,-34,-106,6,-73,28,37,-115,70,24,-42,45,-70,-15,43,-92,-1,-83,-102,-127,-79,14,45,-95,5,-26,-19,-83,-72,-113,15,-124,-97,-19,-100,4,42,-104,-42,9,-62,15,-54,-9,-19,-32,-3,59,-25,-45,19,-74,64,29,-85,-27,-48,-26,-33,20,42,-68,-78,-126,-72,-93,-44,-121,-10,68,25,-120,-49,42,-97,-29,-14,-36,54,3,-27,29,-53,67,36,-65, 
  /* [20][0][][] */ -20,28,34,74,-57,88,-2,22,57,-8,-57,30,-16,36,11,-50,-1,-30,-50,24,33,-38,-3,-26,108,-53,-60,21,3,-3,-33,61,46,11,-16,19,86,-13,-12,-25,-61,-18,18,-54,43,-14,-52,59,60,-79,-24,75,64,47,39,-10,38,45,127,33,114,-32,-39,-22,-16,-44,-40,-5,-53,15,-38,64,-47,-17,3,44,68,96,80,53,66,-5,73,45,18,64,36,98,2,59,5,37,4,2,49,27, 
  /* [21][0][][] */ 69,21,28,-63,49,-15,55,10,-26,-11,-55,31,-30,11,-61,-71,-77,-38,35,-25,43,-49,16,-75,13,-33,-40,30,8,-12,3,10,21,12,-69,-43,49,51,-91,-29,9,3,-1,-33,-65,-74,-35,37,-33,-28,-22,127,2,71,-44,39,7,14,-55,76,22,-19,14,-3,27,1,-31,-19,-65,-12,7,23,4,-12,18,40,-84,-32,10,47,-11,94,9,-12,12,-75,36,-65,-80,31,57,-85,1,26,13,-15, 
  /* [22][0][][] */ 3,-43,19,-64,30,-44,40,69,-58,30,-50,-69,43,-41,-74,-57,4,27,-30,-46,33,38,3,0,114,-16,-75,36,-38,-55,-47,-72,9,16,-5,-6,-14,70,57,-75,39,-21,-13,33,13,-21,75,60,-48,-54,-13,-24,-47,-62,-41,3,75,-31,64,-30,41,-55,-54,-74,-49,-6,-73,-39,41,38,-7,-17,-50,83,20,-61,8,-42,20,116,41,-62,1,-75,127,30,88,-32,43,77,3,15,-5,52,-31,116, 
  /* [23][0][][] */ 14,-100,-27,5,38,-74,-39,-109,68,-98,34,20,-20,-118,-17,-67,32,-67,-121,36,37,-91,40,-65,-41,-49,26,-14,18,3,14,-58,-60,-2,-23,0,37,-46,-124,-34,-118,-43,-26,-122,-95,-105,52,-17,62,-124,-112,0,21,-76,-85,31,-90,-57,36,12,-127,-106,-82,-51,-15,1,-123,-114,13,-52,55,-97,-40,-66,-64,-106,9,-57,38,59,-80,-80,-25,-35,46,-35,51,-60,-105,-7,48,-42,51,-66,-67,39, 
  /* [24][0][][] */ -66,-39,-114,-70,-86,-106,-65,-79,-9,119,68,40,105,56,-39,-105,-97,48,29,-55,58,-79,-53,-59,-35,-21,76,40,76,49,2,-55,-8,12,45,17,-59,-79,61,-15,-64,-101,78,4,18,-50,47,54,-46,-49,-42,-56,52,65,65,-64,-9,66,14,-40,30,-11,31,84,-90,80,-46,-85,-100,41,-53,-27,-28,27,89,65,25,-104,-108,-84,-90,-108,-56,-121,2,51,-8,-127,12,-114,0,-79,-42,33,-100,9, 
  /* [25][0][][] */ -101,-75,-94,-36,51,-90,-115,18,15,-123,-60,-9,33,-28,-121,-46,-90,24,0,-120,33,44,-36,-77,9,-73,-116,6,37,-104,6,70,52,-121,9,34,56,-79,-47,-43,-99,58,-116,-25,57,19,28,23,-117,51,-88,-24,10,-44,-81,-19,-45,16,-38,36,74,9,18,11,-27,37,-43,-34,-105,-32,-46,-124,1,-124,33,-8,34,34,-14,-1,15,18,-62,44,-91,-64,-101,-104,-43,17,66,-9,-127,-37,-44,-90, 
  /* [26][0][][] */ 41,-86,-47,-1,-68,-38,5,-25,-127,-80,67,49,-64,-30,2,-25,83,28,-46,-26,3,54,103,26,31,66,18,43,32,-21,-63,-26,-21,-51,-49,-92,-33,78,-63,95,-89,90,61,6,-54,48,-9,91,-8,45,2,53,23,-82,-4,-69,69,63,59,-18,10,-105,29,5,103,-43,-45,19,-84,86,65,91,58,-68,-76,-4,43,-55,-62,11,-17,38,98,-40,44,11,-24,7,-57,92,6,7,-50,59,55,70, 
  /* [27][0][][] */ -28,34,-60,-113,-127,-76,-91,-31,15,43,-1,-108,-58,10,29,0,21,-43,18,-97,-38,-32,-56,-45,-100,1,-80,26,45,47,-39,-37,20,34,-112,-103,-39,-85,-66,45,-68,9,-13,-13,54,-13,45,105,48,16,16,-21,-91,-40,-39,-59,51,-53,-109,-85,-64,-81,1,8,23,-18,-91,82,51,-21,-119,-30,23,-64,2,-77,20,-68,92,113,31,-56,58,-28,-37,-38,-60,52,-29,25,-6,-72,8,39,43,18, 
  /* [28][0][][] */ 87,71,108,58,-78,-63,-54,-47,80,-72,88,44,-40,8,19,102,81,95,-45,80,27,104,-41,-64,-4,93,-56,50,-27,-11,10,-23,-23,33,86,94,50,-50,8,16,93,101,-59,67,-42,9,25,89,-10,-19,-32,26,-51,80,50,57,78,-10,97,83,25,-11,-37,38,78,86,3,96,-38,21,-14,-31,79,63,32,-36,6,-53,-8,127,-15,-11,85,-40,127,-46,86,-58,11,40,35,-50,-28,31,-88,0, 
  /* [29][0][][] */ 74,22,53,-69,-95,26,-126,35,47,21,-44,-72,112,-77,-16,9,-94,98,53,-86,-100,-32,1,-19,-65,27,-20,-45,-111,30,115,13,-10,34,-112,-28,-34,44,44,66,53,55,-53,77,-11,83,-13,-50,13,-35,10,-97,32,-43,119,27,-54,34,-76,115,-121,82,-21,-77,-61,-27,67,107,87,-87,20,-78,127,34,86,-6,61,-82,-62,8,-33,-81,-25,-91,75,64,38,51,-46,48,76,64,-107,54,-46,17, 
  /* [30][0][][] */ -6,-56,-81,-6,-109,-8,-68,-12,79,-29,-10,-54,-121,-13,23,10,-41,11,74,-123,11,-87,-103,-26,-97,-2,-85,92,-13,-95,-87,-26,-103,-95,-127,-72,14,-29,-4,18,78,-78,-30,62,55,-65,60,49,-61,38,14,-91,82,-44,-29,56,-69,-76,-71,-67,-91,-31,-64,-26,-119,-105,-95,46,-81,59,9,-46,-108,86,31,-87,-78,-66,-67,-63,-4,-14,-93,-19,-94,10,-96,93,-32,-100,34,16,-54,-27,6,-76, 
  /* [31][0][][] */ 63,-108,25,47,18,16,-72,-78,-74,-38,-71,-87,70,-108,-42,103,-71,-98,8,5,11,5,-42,54,5,-96,11,9,-51,-52,31,64,-15,11,-96,-14,54,-60,-49,-109,20,-77,-55,5,-38,-61,-28,12,24,7,41,-65,-110,-51,-78,8,-97,31,-3,95,-62,-26,60,-83,35,66,-28,-57,41,-126,-127,-18,-74,-29,14,-24,-82,-55,19,44,-81,-44,52,12,61,38,-116,-13,-8,-34,-59,-58,1,83,-52,-65, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0020796621683984995, 0.0021150328684598207, 0.0024011388886719942, 0.0024630927946418524, 0.0020511969923973083, 0.0018459894927218556, 0.0018807866144925356, 0.0019640387035906315, 0.0022422431502491236, 0.0021692889276891947, 0.0021525996271520853, 0.0023294994607567787, 0.0024060255382210016, 0.0030666692182421684, 0.0021903745364397764, 0.0023015807382762432, 0.001805656123906374, 0.0024016189854592085, 0.002140596741810441, 0.002110977191478014, 0.0033036340028047562, 0.0031130632851272821, 0.0035870918072760105, 0.0023331784177571535, 0.0020602711010724306, 0.002147772116586566, 0.0023286056239157915, 0.0023055365309119225, 0.0023209976498037577, 0.0022738031111657619, 0.0020895968191325665, 0.002412180183455348, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 882, 12, 3013, 5654, 3118, -2291, 2722, -1814, -3445, -1135, 4782, -3497, 3957, 3960, 1380, 2408, -583, -492, -1757, 4971, 2103, -897, 1858, -442, -962, 3244, 423, 1209, 3367, 2560, 2996, 454, 809, 3878, 3948, 3148, -381, 2602, 1686, -5494, -788, 806, -12, 1777, -1300, 330, -1099, 676, -9296, 1608, 979, -4129, 5356, -1506, 1844, 999, 218, 2985, -781, -3198, 254, 1545, 187, 3067, 5478, 2790, 2127, 3357, 2857, -1012, 1783, 4484, 3153, -1231, 3620, 6676, -135, -3774, 318, 921, 6792, 1480, -369, -2592, 498, 434, 611, -1915, 2654, -833, 3464, 742, -70, -3636, -197, 874, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00016568053979426622, 0.0001736977428663522, 0.00018913128587882966, 0.00012203442020108923, 0.00017498219676781446, 0.00018562638433650136, 0.00019784855248872191, 0.00014882933464832604, 0.00015343185805249959, 0.0001966573327081278, 0.00013347507047001272, 0.00014997145626693964, 0.00013486953685060143, 0.00014224043115973473, 0.00021202350035309792, 0.00017246734932996333, 0.00026171296485699713, 0.00016465088992845267, 0.00020339405455160886, 0.00012255582259967923, 0.00018562380864750594, 0.00020728114759549499, 0.0001788325171219185, 0.00023338959726970643, 0.00021777063375338912, 0.00018732786702457815, 0.0002097932156175375, 0.00020037239301018417, 0.0001629804028198123, 0.00015199510380625725, 0.00016797070566099137, 0.00039959046989679337, 0.00033515380346216261, 0.00016242655692622066, 0.00014582513540517539, 0.00015851347416173667, 0.00020847952691838145, 0.00017337081953883171, 0.0002094193478114903, 0.00010806184582179412, 0.00019624146807473153, 0.00020514022617135197, 0.00022474274737760425, 0.00015639307093806565, 0.00017761913477443159, 0.0001611534389667213, 0.00022027971863280982, 0.00016516006144229323, 8.2769060099963099e-05, 0.00015634951705578715, 0.00024692335864529014, 0.00013265685993246734, 0.00013769100769422948, 0.00014884609845466912, 0.00017915628268383443, 0.00019621974206529558, 0.00017689423111733049, 0.00012651905126404017, 0.00022629846353083849, 0.00012870335194747895, 0.00023219367722049356, 0.00015805763541720808, 0.000226422562263906, 0.00017829003627412021, 0.00012256253103259951, 0.0001647166209295392, 0.00018293970788363367, 0.00020313569984864444, 0.0002318357874173671, 0.00015673114103265107, 0.00023312146367970854, 0.00015332989278249443, 0.00014519419346470386, 0.00021120806923136115, 0.00017057267541531473, 0.00011567278852453455, 0.00011651903332676739, 0.00017706037033349276, 0.00020815589232370257, 0.00013679997937288135, 0.00011379252828191966, 0.00016437711019534618, 0.00020671359379775822, 0.00019438788876868784, 0.00018478436686564237, 0.00014855347399134189, 0.00026720546884462237, 0.00019858521409332752, 0.00023242821043822914, 0.00019976584007963538, 0.00017173564992845058, 0.00020691750978585333, 0.00017650242079980671, 0.00015403979341499507, 0.00035158501123078167, 0.00021309411386027932, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -18,78,-92,24,49,-45,94,51,-27,10,24,-116,107,127,-71,13, 
  /* [1][0][][] */ 5,2,-73,-41,-12,40,49,-127,22,-92,-31,-76,-30,-50,-88,15, 
  /* [2][0][][] */ -43,-35,27,73,32,37,-99,127,-29,19,76,-78,-10,-64,-43,66, 
  /* [3][0][][] */ 90,-107,93,18,-21,-54,-32,127,-26,61,52,24,6,77,23,-17, 
  /* [4][0][][] */ -5,8,-30,43,-47,37,-63,-89,-21,-28,48,-20,21,27,97,127, 
  /* [5][0][][] */ 114,2,-13,-27,-119,12,39,75,24,-24,92,116,127,42,-92,-16, 
  /* [6][0][][] */ 16,-47,-29,-25,-98,-13,15,-43,-18,-25,-33,15,70,70,127,-26, 
  /* [7][0][][] */ -82,5,-51,-106,18,-76,-77,30,-106,78,-53,-72,-127,-30,27,115, 
  /* [8][0][][] */ 72,35,94,24,68,47,60,5,82,-23,32,-3,-127,-40,-76,-3, 
  /* [9][0][][] */ -34,96,15,-72,-20,5,31,-19,-25,40,-34,35,45,127,6,51, 
  /* [10][0][][] */ 77,17,-30,65,-49,-6,32,-46,-44,-53,-54,-72,-127,-72,-2,64, 
  /* [11][0][][] */ 30,-15,101,32,-16,-19,7,126,-127,70,-29,7,-10,8,95,114, 
  /* [12][0][][] */ -37,-11,1,-3,23,-15,116,61,-48,53,-8,-43,20,127,-19,95, 
  /* [13][0][][] */ 43,2,48,58,47,7,127,72,-24,115,-118,-90,70,110,-85,-54, 
  /* [14][0][][] */ -127,73,22,-28,-15,-24,63,-10,-35,27,125,-3,-62,-10,-35,52, 
  /* [15][0][][] */ -32,-35,-127,-33,81,-54,-75,-57,-14,-35,-29,-70,-14,-114,-68,44, 
  /* [16][0][][] */ 68,-41,30,-9,22,-48,30,-27,-43,15,127,42,49,-1,-17,-3, 
  /* [17][0][][] */ 0,28,-40,-127,1,-74,121,-116,-4,3,-59,12,65,112,22,53, 
  /* [18][0][][] */ 6,84,-9,-44,34,-62,6,-33,-40,127,-16,-20,-8,66,1,-19, 
  /* [19][0][][] */ -85,-127,94,-65,4,-127,46,-24,24,46,97,66,42,21,86,-27, 
  /* [20][0][][] */ -41,68,90,25,25,-14,37,-53,97,0,99,-38,-127,-55,-107,-20, 
  /* [21][0][][] */ -116,51,17,48,99,60,91,43,-127,104,-66,7,-19,-2,-84,-44, 
  /* [22][0][][] */ 8,-73,47,4,-14,-127,111,13,8,-29,-18,-92,66,-51,-31,-52, 
  /* [23][0][][] */ -59,-78,44,45,37,-12,19,-43,-3,-12,86,-4,22,47,68,127, 
  /* [24][0][][] */ 3,-14,30,71,55,20,-71,-127,58,30,-45,21,-7,7,-18,-28, 
  /* [25][0][][] */ -14,17,36,-39,-38,-29,33,-57,-2,73,-62,-31,65,127,20,-4, 
  /* [26][0][][] */ -38,90,0,14,47,-63,-12,-39,8,1,15,65,8,-14,-91,127, 
  /* [27][0][][] */ -19,-127,-23,19,-65,57,-1,-58,35,-33,46,-26,20,-46,-99,-32, 
  /* [28][0][][] */ -41,-15,56,83,30,23,-20,-127,-104,34,101,-2,44,-8,-52,-26, 
  /* [29][0][][] */ -118,127,-37,-53,-16,29,-115,-80,-18,-26,-24,15,22,-66,-125,81, 
  /* [30][0][][] */ 34,67,-49,66,-85,-96,-51,-9,-29,16,-7,-121,127,49,4,67, 
  /* [31][0][][] */ 127,12,-50,-15,-33,22,73,3,-29,-30,50,57,27,-8,-41,-2, 
  /* [32][0][][] */ -18,-4,127,12,-33,71,45,28,4,-10,-12,21,-8,64,28,28, 
  /* [33][0][][] */ 2,-10,-39,-31,-56,-1,110,11,10,19,9,-62,96,127,-9,-1, 
  /* [34][0][][] */ -97,-48,104,38,-12,-66,127,-14,-96,35,27,-28,19,56,-25,-57, 
  /* [35][0][][] */ -15,5,-28,18,-84,104,-18,9,-30,127,-3,89,-107,85,52,0, 
  /* [36][0][][] */ -1,-66,127,-36,-36,30,-53,-12,12,3,-27,88,-14,-82,-29,32, 
  /* [37][0][][] */ 55,-18,41,-11,60,-71,-31,36,-70,127,-43,-25,-49,-10,112,-16, 
  /* [38][0][][] */ 78,80,-9,-103,7,-26,-71,96,-47,30,-111,-40,-61,-109,-127,84, 
  /* [39][0][][] */ -114,4,-62,-58,-76,-127,94,2,-123,-18,39,100,54,-16,-18,67, 
  /* [40][0][][] */ 113,32,-23,-127,-51,61,-4,-30,-71,-52,-37,-64,-12,11,30,65, 
  /* [41][0][][] */ 93,-51,-18,-25,0,-8,-60,-26,41,-12,-15,-64,127,-61,70,-57, 
  /* [42][0][][] */ -40,-116,-19,127,-9,-103,-127,2,-5,24,23,71,-60,88,-57,-5, 
  /* [43][0][][] */ -98,-35,-57,-127,-37,8,4,78,23,-104,-34,18,-10,-45,-43,103, 
  /* [44][0][][] */ -2,65,36,-9,11,2,13,127,87,-83,72,72,116,48,-27,7, 
  /* [45][0][][] */ -9,55,-89,95,123,-116,-34,-96,127,-46,107,-97,7,4,-97,78, 
  /* [46][0][][] */ -27,-20,-3,-16,61,-19,41,5,-22,127,-6,-95,43,45,-14,75, 
  /* [47][0][][] */ 103,-28,-12,22,77,-11,-59,-89,15,115,-23,48,-17,-127,-99,-2, 
  /* [48][0][][] */ 4,38,-18,-127,-8,-32,123,-127,-5,13,-59,43,56,86,8,23, 
  /* [49][0][][] */ -10,127,-80,46,31,-54,93,23,13,45,20,-89,3,87,70,-68, 
  /* [50][0][][] */ -6,44,-34,-4,-127,3,-63,-51,54,81,17,14,-24,-29,12,33, 
  /* [51][0][][] */ 127,-59,-57,-26,-58,67,-91,-76,53,-35,-39,83,-29,-71,-10,41, 
  /* [52][0][][] */ -51,-94,58,54,-97,-123,-127,4,-63,-69,0,-44,-21,-43,-2,79, 
  /* [53][0][][] */ 12,71,79,-109,-3,88,99,-35,-2,-34,-8,-27,106,-127,-31,52, 
  /* [54][0][][] */ 3,127,5,-24,-4,-115,-94,46,13,2,-67,114,115,115,17,55, 
  /* [55][0][][] */ -53,16,22,13,85,0,106,127,-122,-41,33,25,113,32,-29,29, 
  /* [56][0][][] */ 127,1,35,23,-61,98,-76,-59,-45,31,-86,11,-71,116,-1,12, 
  /* [57][0][][] */ -65,-36,-45,-47,-84,-125,74,-39,-127,0,50,29,52,53,7,54, 
  /* [58][0][][] */ 28,-67,94,49,6,-70,15,-20,59,-12,-127,-10,27,-63,-62,61, 
  /* [59][0][][] */ 70,4,-89,103,21,43,76,-17,-60,-39,1,-107,-127,-77,31,77, 
  /* [60][0][][] */ -11,0,8,26,-4,-45,-31,-22,-11,-52,44,104,-37,-127,-54,-13, 
  /* [61][0][][] */ -52,6,54,-103,-44,29,24,100,-15,-61,57,44,89,-15,-22,127, 
  /* [62][0][][] */ 64,16,-4,-127,-37,-3,4,-72,7,31,-37,41,35,-45,-96,-81, 
  /* [63][0][][] */ 29,-9,-16,6,-63,-47,-74,15,-63,-12,-54,-32,127,7,53,-12, 
  /* [64][0][][] */ -7,-43,-24,41,-64,-31,1,-127,85,126,35,44,66,-92,-84,111, 
  /* [65][0][][] */ -40,12,-11,-14,-53,81,26,-16,45,-104,87,-82,83,45,-127,59, 
  /* [66][0][][] */ -127,43,-44,-64,27,-42,-93,-21,-103,66,98,-1,-91,-45,34,36, 
  /* [67][0][][] */ -5,-37,-127,-120,81,64,6,-36,-16,5,39,-36,35,26,8,63, 
  /* [68][0][][] */ 29,-5,-23,-48,-43,17,8,36,-72,62,127,-13,-18,-42,-84,11, 
  /* [69][0][][] */ 44,-103,72,-48,19,-127,-43,101,-15,57,95,62,-2,49,-14,1, 
  /* [70][0][][] */ 10,-24,85,24,41,-25,127,-7,30,44,-23,20,-40,67,-44,34, 
  /* [71][0][][] */ -15,8,95,-58,-127,-89,8,10,-27,-10,34,-82,-67,3,19,16, 
  /* [72][0][][] */ -58,-76,0,-126,77,-8,-6,34,-65,27,-101,-26,58,94,-50,127, 
  /* [73][0][][] */ 6,14,26,-9,127,-70,-70,25,-50,72,-64,46,-95,-64,115,-11, 
  /* [74][0][][] */ -47,23,-127,-58,69,-13,-61,54,-94,5,-96,-31,-37,-33,-27,72, 
  /* [75][0][][] */ 86,-55,43,-46,2,-8,-127,-49,-6,-106,76,-6,15,-13,4,-8, 
  /* [76][0][][] */ 18,-82,-9,121,-2,41,114,-64,106,-127,46,124,4,-79,-84,12, 
  /* [77][0][][] */ -37,-26,127,-1,37,-26,-14,-110,33,26,21,67,26,18,-2,-1, 
  /* [78][0][][] */ -29,14,22,-34,26,-40,22,14,22,-20,-9,-107,-122,-50,-127,-65, 
  /* [79][0][][] */ -101,-65,0,73,111,45,-36,69,60,9,-34,56,-63,-127,-84,-55, 
  /* [80][0][][] */ 11,-106,32,125,-22,-27,-127,73,4,32,65,-11,-74,-27,-59,71, 
  /* [81][0][][] */ 90,43,10,76,8,30,-15,127,17,11,123,77,92,3,81,-45, 
  /* [82][0][][] */ -67,-20,15,-20,1,-127,-74,-73,10,80,-16,-44,-8,74,-45,-16, 
  /* [83][0][][] */ 94,-26,63,-15,-18,24,-95,-3,43,-127,15,-33,-35,-39,-6,-8, 
  /* [84][0][][] */ -7,-89,-63,53,127,39,12,34,-81,-18,-103,-9,27,-83,-74,-20, 
  /* [85][0][][] */ -9,38,59,-39,44,-23,71,-127,125,-27,46,-15,114,-101,-22,14, 
  /* [86][0][][] */ 127,-15,98,38,-5,-37,47,26,-67,-53,-95,-32,37,17,-59,12, 
  /* [87][0][][] */ -12,8,-3,-93,73,-51,-35,13,27,-59,98,-43,-83,-127,-31,59, 
  /* [88][0][][] */ -51,-34,40,2,-7,17,-54,-24,-9,17,-53,-127,-33,-25,0,-19, 
  /* [89][0][][] */ -83,-21,33,-57,-9,-3,-127,34,101,34,-68,-25,7,-98,-50,-37, 
  /* [90][0][][] */ -35,-32,-21,-87,127,9,-87,41,30,74,49,-7,49,17,-62,-24, 
  /* [91][0][][] */ -57,-67,25,16,-13,-39,-43,42,-36,-31,60,-24,5,21,-4,127, 
  /* [92][0][][] */ -47,58,21,-18,-29,53,-122,71,-63,-13,76,5,-45,127,67,6, 
  /* [93][0][][] */ -20,72,-16,-34,59,96,-86,-1,65,83,52,72,-127,35,-22,37, 
  /* [94][0][][] */ -7,35,105,8,-127,-61,27,-30,28,-33,34,-19,-36,-35,-7,-25, 
  /* [95][0][][] */ -6,33,9,22,127,5,-107,101,-16,5,-47,60,10,27,84,-55, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0016115091275423765, 0.0016894892323762178, 0.0018396052764728665, 0.0011869805166497827, 0.001701982575468719, 0.0018055144464597106, 0.0019243946298956871, 0.0014476041542366147, 0.0014923710841685534, 0.0019128081621602178, 0.0012982592452317476, 0.00145871308632195, 0.001311822677962482, 0.0013835164718329906, 0.0020622687879949808, 0.0016775217372924089, 0.0025455784052610397, 0.001601494150236249, 0.0019783335737884045, 0.0011920520337298512, 0.0018054894171655178, 0.0020161417778581381, 0.0017394331516698003, 0.0022700882982462645, 0.0021181688643991947, 0.0018220640486106277, 0.0020405757240951061, 0.001948943012394011, 0.0015852459473535419, 0.0014783962396904826, 0.0016337846172973514, 0.0038866584654897451, 0.0032599086407572031, 0.0015798589447513223, 0.0014183834427967668, 0.0015417978866025805, 0.0020277979783713818, 0.0016863094642758369, 0.0020369391422718763, 0.0010510748252272606, 0.0019087631953880191, 0.0019953178707510233, 0.0021859838161617517, 0.0015211735153570771, 0.0017276310827583075, 0.0015674757305532694, 0.002142573706805706, 0.0016064465744420886, 0.000805061892606318, 0.0015207499964162707, 0.0024017258547246456, 0.0012903008610010147, 0.0013392659602686763, 0.0014477671356871724, 0.0017425823025405407, 0.0019085517851635814, 0.0017205802723765373, 0.001230600755661726, 0.0022011157125234604, 0.0012518465518951416, 0.0022584560792893171, 0.0015373640926554799, 0.002202322706580162, 0.0017341566272079945, 0.0011921173427253962, 0.0016021335031837225, 0.0017793822335079312, 0.0019758206326514482, 0.0022549750283360481, 0.0015244618989527225, 0.0022674803622066975, 0.0014913792256265879, 0.0014122464926913381, 0.0020543374121189117, 0.0016590929590165615, 0.0011251034447923303, 0.0011333345901221037, 0.001722196233458817, 0.0020246501080691814, 0.0013305993052199483, 0.0011068149469792843, 0.0015988311497494578, 0.0020106213632971048, 0.0018907341873273253, 0.0017973245121538639, 0.0014449208974838257, 0.0025990018621087074, 0.0019315598765388131, 0.0022607373539358377, 0.0019430433167144656, 0.0016704048030078411, 0.0020126048475503922, 0.0017167693004012108, 0.0014982841676101089, 0.0034197282511740923, 0.0020726821385324001, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 3512, 9129, -947, 656, 3911, 9052, -7256, 9548, 13584, -1885, -2787, 9789, -12569, 9766, 913, 10377, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.2573334212647751e-05, 6.5838270529638976e-05, 6.4195774029940367e-05, 6.8743887823075056e-05, 9.0088899014517665e-05, 5.9037240134784952e-05, 5.6554981711087748e-05, 4.1742816392797977e-05, 9.9255397799424827e-05, 6.8987530539743602e-05, 5.7109173212666065e-05, 5.7275276049040258e-05, 5.2159182814648375e-05, 8.3268903836142272e-05, 7.2523740527685732e-05, 6.1814978835172951e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -78,64,51,-6,-41,-26,-37,1,-61,14,16,9,54,29,9,-42,33,2,65,0,30,-48,127,36,57,38,18,11,-30,-94,-56,34,-12,-40,11,7,17,47,-26,31,6,14,-33,-24,-79,-28,-38,76,-19,31,-66,-16,-6,3,40,-34,-57,42,4,93,53,41,26,16,-19,-73,-29,36,-20,-38,24,-40,-2,-8,-76,-39,-49,22,-84,-30,-41,55,82,-85,-11,84,20,49,54,-16,5,-21,-43,-44,-34,6, 
  /* [1][0][][] */ 0,11,17,-20,-70,-1,-6,51,-9,-6,29,-30,0,-2,-54,-35,-4,20,-56,27,6,-77,-13,45,-2,-63,-6,-28,55,-40,104,-45,43,-6,8,26,4,56,-5,-48,7,39,-26,4,27,65,-127,-67,-41,-40,18,20,53,-22,-23,21,3,-8,-47,-3,40,66,-24,-83,25,-2,-54,0,19,3,-49,-32,-55,-22,-2,-53,27,20,9,-61,-14,-26,-66,-16,42,-20,-10,20,-55,-23,-36,61,-7,15,-31,50, 
  /* [2][0][][] */ 95,-22,23,13,41,-78,35,-24,-32,19,-40,-33,-79,-39,-1,-30,-83,-28,-40,22,15,-11,-13,-1,-14,-45,23,-30,-22,0,-45,81,-66,127,-46,29,17,-7,-23,16,-70,51,69,-11,-82,-19,-4,14,37,-14,-68,-63,33,-17,10,70,47,14,64,17,-14,20,-30,28,23,17,18,3,4,46,-40,3,47,43,65,26,12,-34,63,47,79,-29,-8,25,-68,21,19,63,-13,33,-18,-1,-11,68,-9,7, 
  /* [3][0][][] */ 20,20,-39,-3,19,-32,5,-74,-34,39,63,59,50,1,-60,54,16,-55,31,17,8,127,15,-53,20,10,-19,-6,59,-23,37,14,3,41,-33,-40,19,37,20,16,-86,-17,0,9,-39,41,9,22,-14,-31,-18,-33,38,-78,-21,-32,-3,109,-14,-4,5,-4,-27,10,30,25,-52,12,3,-15,11,-38,-31,-36,14,-8,3,3,-31,-71,-26,-6,-77,-10,-30,-2,26,-17,22,-5,23,-10,40,35,-30,58, 
  /* [4][0][][] */ 36,-8,-16,1,24,37,-51,4,-28,82,57,-31,-32,-17,17,-55,-12,3,-31,43,-1,-41,56,66,-61,13,-127,13,-26,-89,11,11,-73,-44,7,64,2,34,11,17,-25,-61,-2,-22,-21,-15,0,54,-35,35,-5,20,19,-7,-70,6,44,-40,24,-6,27,-17,13,19,-25,36,-33,7,-70,37,-46,17,49,-48,-22,-40,14,-54,5,28,-29,79,-40,20,-27,-6,16,-60,24,27,36,-10,-34,-18,4,10, 
  /* [5][0][][] */ -70,59,6,10,25,-20,56,-51,-25,21,28,-13,47,-4,-31,-20,11,-66,39,12,-127,-10,-69,38,-12,-24,44,12,58,-59,-32,40,72,87,-3,23,-41,-12,35,-15,-59,74,74,-28,22,80,21,-22,-35,36,-5,20,-2,-33,31,-67,4,-43,-87,-84,76,99,-37,-35,63,-54,-92,-39,-25,-58,-41,29,-26,1,-44,-31,18,-31,-3,-58,86,-14,-16,-88,-66,57,19,-13,-15,7,18,2,-12,34,11,73, 
  /* [6][0][][] */ 17,17,-78,33,-39,-112,102,127,-69,41,-3,86,-69,-49,60,57,-4,-38,-20,26,24,-18,-54,-83,-35,45,66,11,10,78,102,-28,47,-13,22,-70,20,46,21,63,7,62,-10,-7,16,-27,-93,2,55,-87,-35,99,53,10,-20,-55,80,80,-11,40,-61,44,-75,-9,33,-8,-16,34,52,41,-22,-69,-54,29,76,24,50,-15,-12,-70,12,-29,-64,44,-3,-27,14,17,-30,29,30,65,-32,-8,-46,105, 
  /* [7][0][][] */ 37,57,-7,-85,-51,3,23,6,-30,70,-61,-80,-61,-2,37,-29,-66,-68,-10,56,-26,127,-10,52,-19,-8,30,44,58,1,66,-53,21,49,-25,25,-3,-23,6,34,-44,-34,-10,-56,38,-55,109,9,33,-102,-63,-64,-47,-15,-17,-24,15,-24,-96,-24,-23,73,-7,-21,-52,24,-29,-7,-82,-36,-96,67,51,51,-19,20,-46,27,49,-52,-16,-46,60,-78,58,-48,-29,-24,-38,65,-97,34,40,-9,-24,13, 
  /* [8][0][][] */ -11,93,-39,33,-5,-18,-54,24,-87,-36,12,-1,-2,21,18,97,11,-53,-2,15,31,-8,-11,-11,-32,58,-2,22,6,-3,-38,-9,-2,-37,-12,-73,-48,29,37,-7,4,-40,47,14,-41,-38,-26,-7,-29,-22,43,90,-13,3,-55,86,-21,69,10,-21,-44,25,10,58,-29,-26,-45,-1,-8,6,-11,-4,-14,-49,-107,-24,-43,37,-91,-65,-39,-1,-68,-30,-20,33,45,44,24,42,-73,-3,-83,-127,11,-33, 
  /* [9][0][][] */ 5,11,-43,32,-22,-25,64,55,-18,50,-53,76,-52,-34,-6,91,19,41,44,-13,41,-2,64,-127,-52,22,24,-20,25,-25,59,13,-54,6,-17,-115,60,12,-46,-3,3,17,50,-48,-49,-19,14,27,50,64,-15,4,-50,-84,24,7,17,-14,88,17,-77,41,-33,-3,75,17,-1,25,-71,66,26,4,-14,80,0,-14,-28,58,-77,27,71,-53,111,-28,22,-30,-15,-18,-71,52,27,-21,34,32,-53,-13, 
  /* [10][0][][] */ 86,-28,-32,13,-6,-18,53,-51,24,-1,-28,-29,-110,-27,-4,-28,-47,-27,11,-10,53,49,20,15,-45,86,29,-8,-23,-106,-23,-43,39,-27,16,-2,68,-127,89,118,33,-83,-4,3,-33,-111,1,64,8,61,-65,-69,-18,16,2,29,-13,-84,93,29,-39,43,-27,-12,-27,-49,42,50,14,-50,11,46,106,28,39,-59,20,-59,86,4,-57,2,20,49,-44,-35,41,33,-66,20,46,28,64,82,-16,-7, 
  /* [11][0][][] */ -31,-8,19,-49,14,9,-36,-79,56,-30,38,-19,0,-10,2,19,-56,-45,48,-9,-66,41,-80,-41,44,1,-58,62,61,-84,7,-36,27,13,-3,-23,-107,-14,-86,29,-88,37,-28,62,23,16,-18,-35,-1,-43,-59,-71,0,17,71,-65,-64,-44,31,-88,-31,-31,-27,-122,3,-65,63,77,127,-9,80,16,-22,-28,69,-11,61,12,69,8,3,-29,-72,71,59,28,15,-41,-41,-66,-7,31,61,54,81,87, 
  /* [12][0][][] */ 11,-46,-6,-23,12,115,-32,69,48,50,-34,13,26,63,23,-29,-77,84,1,50,111,5,87,-66,18,22,-76,-58,-43,86,11,-34,11,-26,23,-35,27,23,-15,-53,45,-32,2,71,-9,49,19,-20,-40,16,-5,45,-11,-7,3,2,-22,39,-11,77,35,-101,-3,-110,-34,123,-25,-59,-29,-33,25,-38,-20,11,-3,36,7,46,-109,8,-31,34,127,31,20,32,-39,-63,33,-2,-75,62,75,-12,-55,-104, 
  /* [13][0][][] */ -16,12,20,-43,-53,-32,-1,7,12,-42,-64,-53,18,-78,-20,-77,-38,12,-66,8,-59,-30,23,81,-56,2,82,12,-9,-4,57,38,-16,-23,-88,110,-8,-10,27,-58,127,39,-5,24,-2,-63,55,-26,83,-29,-56,26,34,-14,-14,64,71,-57,-44,13,33,1,-20,-72,-3,31,-22,4,-59,-4,-52,-25,-51,39,-1,-92,-66,7,-21,92,14,56,55,-83,62,5,-3,-6,-44,-12,-14,20,-57,-8,-2,-5, 
  /* [14][0][][] */ 10,42,-78,-37,69,67,-85,-17,18,-28,84,11,37,-32,-37,-38,-58,-10,38,127,-3,-11,4,1,25,18,-19,55,-14,1,-43,32,74,29,-42,3,-11,45,41,26,37,-5,62,-13,-17,-28,47,-24,39,-1,-20,-24,29,10,-25,32,31,71,-77,-8,-11,-55,-34,-83,16,-51,-60,17,-68,32,-27,56,8,-23,-32,-31,18,2,-41,-54,32,3,-20,-35,-26,65,-14,-29,-6,33,44,29,2,-12,-36,-47, 
  /* [15][0][][] */ -70,-82,54,-47,-13,-1,-59,-65,13,11,-21,40,-28,-14,47,77,-115,-4,31,-61,15,-34,-7,-57,29,-3,26,-36,-62,-127,-70,-6,-59,50,78,-56,-4,-45,43,-32,-6,-33,-10,9,23,2,101,108,-40,-22,39,-50,-44,39,-14,-53,-109,-57,84,-6,-40,-9,-105,10,-58,0,36,4,12,-67,81,-29,82,-28,-9,-44,25,-4,91,50,-28,74,63,64,19,-54,-127,-11,-36,-19,-63,20,55,-25,-15,59, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0018093666294589639, 0.002798126544803381, 0.002728320425376296, 0.0029216152615845203, 0.0038287781644612551, 0.002509082667529583, 0.0024035866372287273, 0.0017740697367116809, 0.0042183543555438519, 0.0029319699387997389, 0.0024271397851407528, 0.0024341992102563381, 0.0022167651914060116, 0.003538928460329771, 0.0030822588596493006, 0.0026271366514265537, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -1764, 359, -3839, -2826, 3402, 4918, -2403, 234, -908, -4898, 11740, -2621, -1152, 11392, 8885, -2171, 17051, 3738, -4658, -508, -763, -5221, 4002, -1432, 400, -2191, -300, -4093, -2620, -4900, -3816, 1313, 10681, 4407, -3888, 655, 2362, -2283, -1118, 8888, -1526, -17, -998, -3289, 14752, 20807, -4557, 16644, 2775, 3950, 10926, -4460, -83, -4723, 1201, 7328, -1925, -1219, 17372, 4890, 5633, 12038, 8235, -6210, 2496, 475, -1390, 1391, -3337, -1546, 5843, -186, 14176, 17, -854, 12531, 2848, -1545, 12876, -3963, 1226, 10065, 2060, 3307, 12207, -2752, -7688, -4838, -2508, -5562, 13463, 1318, -2298, -516, -3401, -3216, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00019041833002120256, 0.00024326416314579546, 7.603919948451221e-05, 0.00021598751482088119, 0.00024818326346576214, 0.0002283942885696888, 0.00030714270542375743, 0.00026254719705320895, 0.00018072704551741481, 0.00012956008140463382, 0.00012073836842318997, 0.00025028700474649668, 0.00026954538770951331, 9.0811481641139835e-05, 0.0001390298712067306, 0.00016802157915662974, 0.00014205483603291214, 0.00030818695086054504, 0.00016172869072761387, 0.00014171640214044601, 0.00016416584549006075, 0.00022165432164911181, 0.00030433334177359939, 0.00021936536359135062, 0.00089515687432140112, 0.00027572459657676518, 0.00027202308410778642, 0.00013021449558436871, 0.00013746281911153346, 0.00013296729594003409, 0.00032459356589242816, 0.00019734032684937119, 0.00019641396647784859, 0.00018783663108479232, 0.00023482473625335842, 0.0002530016063246876, 0.00017545194714330137, 0.00019473517022561282, 0.00031366848270408809, 0.00014174752868711948, 0.00015737072681076825, 0.00026090873870998621, 0.00020956138905603439, 0.00014049811579752713, 0.0001114830156438984, 6.1920232838019729e-05, 0.0002330764546059072, 9.9409124231897295e-05, 0.00019605435954872519, 0.00012791335757356137, 0.00014443809050135314, 8.2672879216261208e-05, 0.00018404515867587179, 0.00014905344869475812, 0.00025251921033486724, 0.00014874504995532334, 0.00020278687588870525, 0.00025049218675121665, 0.00015704658289905638, 0.00015562138287350535, 0.00020309610408730805, 0.00015934862312860787, 0.0001491849689045921, 9.8778058600146323e-05, 0.00015290395822376013, 0.00027479470008984208, 0.000487104756757617, 0.0002333845040993765, 0.00022707306197844446, 0.00020016888447571546, 0.00017465741257183254, 0.00019157625501975417, 9.8666430858429521e-05, 0.00020151342323515564, 0.00029762522899545729, 7.5409116107039154e-05, 0.0001335116830887273, 0.00023842939117457718, 0.00014825085236225277, 0.00022027090017218143, 0.00023982558923307806, 0.00013404958008322865, 0.00021777678921353072, 0.00019694598449859768, 0.00010890176054090261, 0.000216196000110358, 0.00010713126539485529, 0.00015048056957311928, 0.00017936540825758129, 0.00017683669284451753, 0.00010434554860694334, 0.00045252946438267827, 0.00025623070541769266, 0.0002391956077190116, 0.00015794954379089177, 0.00031662225956097245, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 53,88,7,18,-57,35,56,14,74,-57,-55,74,2,14,14,-101,-127,4,25,9,58,102,15,127,17,-42,-46,13,-48,9,42,-42,-74,-18,-10,127,-10,-6,20,-33,64,-31,-7,16,-84,20,19,-20,7,-52,-67,65,-16,71,-47,1,-63,-26,-49,-48,-127,-33,-127,18,-51,56,93,5,-6,40,17,27,-29,26,53,49,-19,-13,-115,60,-22,-58,61,-19,-28,8,16,55,-85,-23,-127,15,76,-9,88,7, -47,-29,18,66,-28,91,-31,-32,97,55,-127,35,-34,-90,-76,57,-111,56,75,46,127,24,37,110,15,25,39,115,-9,33,14,-102,78,47,30,14,37,83,-4,-123,127,-21,101,95,-127,-73,127,-39,-41,-116,-45,-2,-41,127,-19,-45,9,7,-122,-71,20,-127,-54,72,-60,84,95,-17,4,127,127,30,-35,32,-26,-58,-20,-74,-18,127,3,-58,127,-25,-127,-35,78,127,127,104,-23,1,117,-57,127,13, -2,-83,10,-20,-18,-28,-22,60,10,39,-117,5,-20,27,3,-127,-74,16,47,-3,41,108,41,127,17,-70,19,46,11,47,25,-64,-68,-86,-20,55,-47,-49,-4,-20,35,8,-18,36,-43,-38,40,-91,-2,12,-58,80,22,23,21,3,97,-31,-4,-127,-90,-4,-55,-2,18,36,16,4,-14,-33,-36,41,-66,-38,2,-13,-33,-6,-71,52,-16,-127,38,-56,1,-59,69,10,-64,8,-54,25,15,54,7,-5, 
  /* [0][1][][] */ 125,-17,86,91,-16,-95,127,62,-46,-127,-101,127,-5,-108,-62,-21,-44,-39,89,37,-110,18,-124,-77,-33,-6,-127,127,-100,-13,127,47,21,23,18,97,-117,50,2,-67,90,-127,38,72,-119,-98,47,-72,-95,-46,-104,-8,127,-20,71,3,-127,5,-45,27,-22,-84,-16,44,-58,-10,127,-114,-62,68,-106,-127,-68,74,127,-67,47,71,-127,-6,127,-74,-60,105,20,35,26,120,-19,-9,-104,21,-34,-59,14,-9, -127,8,-63,127,-127,-127,-108,-127,124,45,-30,-9,-81,-127,-1,81,-68,-127,127,127,26,-127,-127,20,-127,127,28,97,-42,-5,-88,9,-127,27,127,-57,-23,127,127,-56,-47,26,53,41,-14,-127,-95,-22,-35,-127,-90,126,54,49,30,-64,44,5,91,-15,-18,-18,-77,127,-32,-127,64,127,13,51,-103,-52,-25,36,-105,-127,106,127,13,-20,-64,30,-99,76,-71,-73,127,123,117,127,-95,-127,-127,-82,37,127, 24,-6,127,98,-20,-76,-5,80,-66,116,-61,68,3,-16,-127,91,37,-44,-5,20,-76,39,-50,-92,7,12,92,-49,127,38,15,-127,8,-127,-6,77,-127,26,-10,-26,9,113,23,127,-62,-32,47,-127,127,-23,-127,10,86,-43,-127,26,114,-5,-127,56,-30,-28,-3,58,127,-17,-22,-9,-55,1,-113,-76,-101,-127,-1,-98,-37,-35,-102,-24,-93,-58,-16,127,-60,5,31,-31,-14,-24,-2,35,-13,127,24,-2, 
  /* [0][2][][] */ 47,-127,46,-47,-11,7,55,6,-55,-73,-24,-105,35,-1,-56,69,-19,-10,-75,8,-28,24,22,-23,9,-4,-1,-73,-44,30,6,-2,-59,-37,-28,-37,123,23,-8,-38,-10,31,2,-83,-46,-102,0,-86,-46,88,-14,82,-13,27,-52,5,-6,36,-51,57,1,5,19,18,-49,48,-33,-39,47,13,-28,54,-95,24,-15,-36,-127,-10,-34,4,3,-85,-52,-89,-17,70,17,-18,-95,9,-58,-9,25,34,-33,-33, -42,-3,98,-40,111,102,4,-27,-127,49,-89,-68,127,-62,-86,35,-37,22,-8,-4,-17,13,56,3,55,-9,-8,15,53,127,0,-24,-90,-6,38,-101,74,117,2,-127,-6,-15,-127,60,23,-65,-3,-94,-43,-32,-57,127,45,-20,-48,-127,-42,127,-87,29,52,-93,44,53,-54,-26,-23,15,127,-21,26,106,-127,2,-29,-117,-71,-32,-24,-12,-7,-9,-50,-72,-90,127,68,-9,79,46,30,-5,2,-29,1,-9, 14,65,73,-48,26,0,18,51,8,66,-13,34,34,-11,-19,4,-32,7,-24,57,-6,60,12,-58,-10,62,34,7,30,49,-21,-101,7,-48,-20,-75,9,50,-8,-20,-18,-2,14,-66,3,-78,28,-95,-4,52,35,40,-25,28,8,-12,24,30,-37,98,-42,5,11,0,15,8,-18,7,24,36,28,58,-50,-35,10,-49,-22,-30,-49,22,-16,32,-20,-78,-110,47,-4,-3,-68,80,20,0,28,-5,-19,-21, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0080927787348628044, 0.010338726453483105, 0.0032316658180207014, 0.0091794691979885101, 0.010547788813710213, 0.0097067570313811302, 0.013053564354777336, 0.011158255860209465, 0.0076808989979326725, 0.0055063031613826752, 0.005131380632519722, 0.010637197643518448, 0.011455678381025791, 0.0038594878278672695, 0.0059087695553898811, 0.0071409172378480434, 0.0060373307205736637, 0.013097944669425488, 0.0068734693340957165, 0.006022946909070015, 0.0069770482368767262, 0.0094203082844614983, 0.012934166938066483, 0.0093230279162526131, 0.038044165819883347, 0.011718294583261013, 0.011560980230569839, 0.0055341161787509918, 0.0058421697467565536, 0.0056511098518967628, 0.013795225881040096, 0.0083869639784097672, 0.0083475932478904724, 0.007983056828379631, 0.0099800508469343185, 0.010752568021416664, 0.0074567073024809361, 0.0082762446254491806, 0.013330910354852676, 0.0060242698527872562, 0.0066882558166980743, 0.011088620871305466, 0.0089063588529825211, 0.0059711695648729801, 0.0047380281612277031, 0.0026316097937524319, 0.0099057490006089211, 0.0042248875834047794, 0.0083323102444410324, 0.0054363175295293331, 0.0061386185698211193, 0.003513597184792161, 0.0078219193965196609, 0.0063347714021801949, 0.010732066817581654, 0.0063216644339263439, 0.0086184423416852951, 0.010645917616784573, 0.0066744796931743622, 0.0066139083355665207, 0.0086315842345356941, 0.0067723160609602928, 0.006340361200273037, 0.0041980673559010029, 0.0064984182827174664, 0.01167877484112978, 0.020701952278614044, 0.0099188415333628654, 0.0096506047993898392, 0.0085071772336959839, 0.0074229398742318153, 0.0081419907510280609, 0.0041933231987059116, 0.0085643203929066658, 0.012649072334170341, 0.0032048875000327826, 0.0056742466986179352, 0.010133248753845692, 0.0063006612472236156, 0.0093615129590034485, 0.010192587040364742, 0.0056971069425344467, 0.0092555135488510132, 0.008370203897356987, 0.004628324881196022, 0.0091883298009634018, 0.0045530786737799644, 0.0063954242505133152, 0.0076230294071137905, 0.0075155594386160374, 0.0044346856884658337, 0.019232502207159996, 0.010889804922044277, 0.010165813378989697, 0.0067128557711839676, 0.013456446118652821, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 3929, 2713, 2544, -1319, 3923, 9011, 6231, 1200, 72, 9560, 2276, -2217, 2626, 2284, 350, 51, 7019, 7132, -530, -232, 5169, 7690, 14263, -1973, -4848, -464, 21094, -201, 1725, 1183, 7187, -1420, 4911, 2653, 3744, -3484, 1121, -4782, 1048, 2779, 2681, 2281, 1857, -507, 1251, 1788, 2795, 4888, 4384, 1550, 3753, 651, -2950, 2034, 1577, 2056, 1405, 1855, 13481, 798, -1003, 5076, 3591, 3493, 3076, 6305, -6482, 2272, 7277, -1343, 4557, 768, 2045, 2856, 2827, 1199, -478, 1833, 2776, 1943, 2279, 3687, 4821, -58, 4220, 5451, 576, -879, 11606, -1, 952, -1875, 10313, 1703, 883, -228, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00017911955364979804, 0.00010705576278269291, 0.00013054625014774501, 0.00021024254965595901, 0.00016898263129405677, 8.9362947619520128e-05, 0.00014883825497236103, 0.00018665751849766821, 0.00023046485148370266, 8.076012454694137e-05, 0.00015765530406497419, 0.0001649614714551717, 0.00014713578275404871, 0.00017485105490777642, 0.0002509702171664685, 0.00021774129709228873, 0.000108645974250976, 0.00011851481394842267, 0.00016213551862165332, 0.00017423524695914239, 0.00012116615835111588, 0.00011051238107029349, 6.7616703745443374e-05, 0.00017083981947507709, 0.00012900987348984927, 0.00022708022152073681, 4.6886256313882768e-05, 0.00018490829097572714, 0.00016206645523197949, 0.00017086215666495264, 0.00010919919441221282, 0.0002257727028336376, 0.00016030686674639583, 0.00022029911633580923, 0.00017672774265520275, 0.00014763939543627203, 0.00019568191783037037, 0.00012316404900047928, 0.00014343764632940292, 0.00016670655168127269, 0.00015832853387109935, 0.00018372663180343807, 0.00015029279165901244, 0.00024961127201095223, 0.0002776854089461267, 0.00013319350546225905, 0.00017240308807231486, 0.00013384844351094216, 0.00013644329737871885, 0.00025117883342318237, 0.0001637928799027577, 0.00033842810080386698, 0.00012831897765863687, 0.00012150723341619596, 0.0001733106910251081, 0.00019398979202378541, 0.00018931823433376849, 0.00019038764003198594, 6.5825144702102989e-05, 0.00026729394448921084, 0.00026182085275650024, 0.00012712024908978492, 0.00016278091061394662, 0.00015018467092886567, 0.00018166424706578255, 0.00011390267900424078, 0.00011804170935647562, 0.00018099660519510508, 0.00010308629862265661, 0.00018054101383313537, 0.00014522926358040422, 0.00019922581850551069, 0.00019524453091435134, 0.00016177250654436648, 0.00017979634867515415, 0.00015922320017125458, 0.00023461770615540445, 0.00016497129399795085, 0.00014318416651804, 0.00021274885511957109, 0.00018945116607937962, 0.0001313469692831859, 0.00014777858450543135, 0.00024266257241833955, 0.00010539693175815046, 0.00013510274584405124, 0.00018550451204646379, 0.00029009531135670841, 7.9247671237681061e-05, 0.0002782788360491395, 0.00022948250989429653, 0.00015547714428976178, 7.9397781519219279e-05, 0.00020598396076820791, 0.00018215899763163179, 0.00021222654322627932, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -19,-28,-45,-76,-49,-82,-76,-34,35,-62,74,-4,46,-65,37,-127, 
  /* [1][0][][] */ -127,117,-68,-125,-105,42,22,31,-55,-34,97,-19,67,122,86,118, 
  /* [2][0][][] */ -71,-8,-62,-23,-31,-41,30,-31,-114,82,84,32,41,40,-18,127, 
  /* [3][0][][] */ -31,-79,20,-18,-93,-2,-65,-127,7,-1,39,-55,-71,-51,-95,-53, 
  /* [4][0][][] */ 76,-10,24,43,-49,-24,-127,16,10,27,1,18,36,-38,-41,-44, 
  /* [5][0][][] */ -92,46,-60,-53,56,-71,-34,-102,105,-48,-29,-61,21,-127,-101,-94, 
  /* [6][0][][] */ -29,-48,-55,24,-77,27,18,-5,-34,-50,127,-53,-20,11,-76,14, 
  /* [7][0][][] */ -75,127,69,-42,83,115,40,-15,49,67,-73,-59,60,30,4,111, 
  /* [8][0][][] */ -64,-10,19,8,57,-15,50,127,-47,22,-18,-55,34,54,-65,-39, 
  /* [9][0][][] */ 95,52,97,78,-94,8,-87,-127,80,-24,107,7,-13,-117,48,-31, 
  /* [10][0][][] */ -75,-127,18,-91,-124,21,50,26,-19,-83,2,8,-20,44,-108,33, 
  /* [11][0][][] */ 95,-39,36,65,-78,-38,15,-45,118,127,-40,81,14,-84,-27,50, 
  /* [12][0][][] */ -82,-69,127,-24,116,-2,62,31,72,-56,87,68,-21,3,-101,69, 
  /* [13][0][][] */ -26,-32,-4,-6,42,29,127,35,-78,24,-10,20,-13,92,70,-46, 
  /* [14][0][][] */ 123,-39,76,15,41,66,127,11,51,7,15,9,33,-35,16,4, 
  /* [15][0][][] */ -27,127,-3,-52,57,109,-92,88,-58,-5,-36,-48,-23,103,-34,-34, 
  /* [16][0][][] */ -68,37,127,-67,12,63,-18,-4,10,3,3,25,119,-15,78,101, 
  /* [17][0][][] */ 47,84,26,-127,59,-91,-4,-37,-41,57,-46,-17,-10,12,53,-4, 
  /* [18][0][][] */ -53,3,-45,-66,118,70,-74,-73,0,49,109,91,-15,127,-26,-37, 
  /* [19][0][][] */ 65,105,75,85,14,-7,-28,-3,-53,92,57,127,39,79,-6,6, 
  /* [20][0][][] */ 127,-18,-7,24,-99,-99,-17,43,-47,-49,-116,-105,95,-17,73,36, 
  /* [21][0][][] */ -78,-103,-7,106,-80,-32,-127,61,33,12,85,20,5,37,-68,0, 
  /* [22][0][][] */ -28,-14,-127,-57,89,-1,-4,113,48,48,71,27,-34,46,8,107, 
  /* [23][0][][] */ -56,42,-22,31,16,84,87,89,-55,127,-1,-1,-25,46,-31,-56, 
  /* [24][0][][] */ 23,-127,90,-24,120,53,76,-69,92,43,45,34,-88,-27,-61,-18, 
  /* [25][0][][] */ 74,-12,89,-1,6,-14,-38,52,80,-2,-43,-1,127,-30,56,12, 
  /* [26][0][][] */ 92,-2,94,90,119,16,-104,30,-29,30,38,127,40,-81,37,-56, 
  /* [27][0][][] */ -18,57,-48,43,-54,127,6,-81,19,-27,104,56,72,-20,99,56, 
  /* [28][0][][] */ -83,-2,-67,-127,14,-68,24,-55,-76,77,-93,6,1,34,-36,120, 
  /* [29][0][][] */ 78,114,-103,9,14,56,-33,5,30,127,28,65,-126,58,-2,117, 
  /* [30][0][][] */ -10,127,-62,-108,81,-41,11,-36,4,67,-121,-56,83,0,-76,115, 
  /* [31][0][][] */ 24,-117,72,57,81,-41,-53,23,-23,-37,6,-27,-66,31,41,127, 
  /* [32][0][][] */ -38,47,6,32,-114,51,21,24,37,-127,37,-51,14,31,35,2, 
  /* [33][0][][] */ -96,11,45,64,11,28,-29,48,-50,-4,33,-51,-20,17,2,127, 
  /* [34][0][][] */ -26,5,-82,-63,59,0,6,75,28,6,-8,-39,-38,-37,-48,127, 
  /* [35][0][][] */ 98,5,41,-27,10,-3,-99,-38,-31,-127,-50,10,13,-50,43,-51, 
  /* [36][0][][] */ 23,11,-127,23,10,84,-39,59,-3,74,78,60,25,22,-35,29, 
  /* [37][0][][] */ 77,-19,61,-42,89,-117,21,-37,-127,83,-87,-17,-5,41,94,28, 
  /* [38][0][][] */ -5,109,49,-29,45,-1,34,-127,-12,-11,-90,48,-56,-93,-58,-2, 
  /* [39][0][][] */ 120,74,-92,-91,-9,16,-4,-64,-13,-14,-26,-50,39,-30,-127,-41, 
  /* [40][0][][] */ -45,11,-63,-93,-12,-73,-28,-127,27,27,-3,-73,59,64,8,121, 
  /* [41][0][][] */ -42,-100,-13,127,-1,-46,-51,-16,3,-62,119,-67,-91,-15,6,43, 
  /* [42][0][][] */ -38,41,-15,-112,35,11,7,-34,124,10,-69,-6,127,-54,-49,5, 
  /* [43][0][][] */ -1,58,39,-4,127,51,-13,10,8,71,-17,-102,-89,-51,-24,-20, 
  /* [44][0][][] */ 41,6,9,0,-44,-46,-4,55,22,0,40,-11,127,25,-25,-18, 
  /* [45][0][][] */ -14,-98,-80,33,-47,-100,18,63,35,-34,0,-13,-52,127,34,-22, 
  /* [46][0][][] */ -32,-125,91,17,35,-44,-127,43,46,-51,114,-1,78,75,56,103, 
  /* [47][0][][] */ -22,-43,29,97,33,40,36,4,-7,-50,-127,-5,22,-44,-88,6, 
  /* [48][0][][] */ -119,77,-9,-29,4,47,5,-127,39,7,-7,-44,33,-97,-64,-2, 
  /* [49][0][][] */ -29,23,36,-55,-4,17,127,64,-42,-30,-8,45,-64,26,-54,56, 
  /* [50][0][][] */ 44,-20,-44,33,31,-127,-80,22,-48,49,-7,44,42,-80,-92,-87, 
  /* [51][0][][] */ -27,80,-43,78,0,35,-41,-55,-27,-39,26,-7,-11,32,-14,127, 
  /* [52][0][][] */ -127,-13,20,16,48,52,58,42,-10,-120,-36,-33,-126,-44,-114,-27, 
  /* [53][0][][] */ -100,-94,-63,-127,-82,-15,40,92,53,-37,-86,-2,-42,9,29,115, 
  /* [54][0][][] */ -17,-86,19,-41,-94,37,98,-10,0,-127,23,-28,-19,-32,-117,37, 
  /* [55][0][][] */ 6,-25,-20,8,73,-12,59,61,-44,-63,-127,-18,35,-41,-23,25, 
  /* [56][0][][] */ 86,-86,-37,-16,-113,20,-117,32,15,20,-68,-9,127,-72,21,4, 
  /* [57][0][][] */ -74,40,41,-52,96,18,51,33,-80,72,23,21,-79,127,-60,-8, 
  /* [58][0][][] */ 63,6,16,11,74,33,-63,-100,74,-127,-105,32,-77,-78,-66,51, 
  /* [59][0][][] */ -80,-28,-17,5,12,62,-76,1,43,127,-77,56,-49,23,17,-34, 
  /* [60][0][][] */ 44,-55,4,9,-127,-45,0,-28,19,37,-23,36,51,-41,1,36, 
  /* [61][0][][] */ 62,57,-81,-10,-30,6,-124,-96,-36,27,23,127,69,-47,57,64, 
  /* [62][0][][] */ 41,-31,51,9,-5,22,28,110,-31,127,34,80,20,15,89,52, 
  /* [63][0][][] */ 1,-127,-4,-9,-64,18,43,2,-6,-38,11,-16,-38,116,103,8, 
  /* [64][0][][] */ -46,-9,-127,-12,-8,22,58,-2,13,-68,52,-23,61,-26,-63,116, 
  /* [65][0][][] */ -24,11,41,-1,48,-71,44,44,-77,22,-112,-79,6,127,-37,38, 
  /* [66][0][][] */ -57,-109,17,-64,-36,-127,40,-55,26,-27,26,84,-23,-49,-79,76, 
  /* [67][0][][] */ -35,-47,-33,-1,-29,105,-8,-127,-70,-3,-77,-120,33,-32,-89,-1, 
  /* [68][0][][] */ 127,36,46,-38,-86,-19,-51,-55,-31,-113,-44,-37,61,-40,41,-78, 
  /* [69][0][][] */ 57,-18,44,-15,8,-53,-75,21,-28,127,-28,22,-6,60,67,-27, 
  /* [70][0][][] */ 29,-4,-18,39,-108,26,-23,-60,73,127,36,49,32,-23,9,6, 
  /* [71][0][][] */ 18,-80,62,39,-53,-30,14,19,127,46,-7,43,114,-24,-12,23, 
  /* [72][0][][] */ 26,-45,25,127,-2,43,-76,67,49,-38,22,24,-93,-81,-61,112, 
  /* [73][0][][] */ 57,-18,40,-127,59,-106,-93,2,-38,48,-10,4,20,-82,64,-29, 
  /* [74][0][][] */ 98,-3,12,61,-127,-44,69,-26,-68,-32,6,-62,11,-98,13,19, 
  /* [75][0][][] */ 47,91,-127,2,30,35,-25,-3,-34,3,67,83,-101,68,78,67, 
  /* [76][0][][] */ -34,-16,-7,-6,-69,10,80,-18,-84,9,108,52,-71,-127,20,66, 
  /* [77][0][][] */ -127,43,-34,46,-28,-41,-2,126,84,-23,46,127,-18,44,-4,70, 
  /* [78][0][][] */ 127,42,-25,43,-39,27,-104,-33,7,41,-87,-4,65,-105,4,35, 
  /* [79][0][][] */ -33,-48,112,27,-12,-127,-28,-68,-4,28,55,-26,-8,63,-46,104, 
  /* [80][0][][] */ 73,93,9,-127,-43,21,81,-9,44,28,-31,-2,78,-61,16,-1, 
  /* [81][0][][] */ 60,-83,18,-79,81,47,-26,102,127,0,-48,-16,-56,2,-125,-87, 
  /* [82][0][][] */ 78,57,61,25,113,-127,64,9,13,111,-33,-23,18,-29,28,-29, 
  /* [83][0][][] */ -29,55,10,32,81,62,54,127,5,67,-23,-71,-25,53,-27,-80, 
  /* [84][0][][] */ 42,-68,18,112,-13,-127,-116,24,-98,43,-62,-20,-121,55,34,-102, 
  /* [85][0][][] */ -127,46,-48,49,15,-99,-21,-16,-2,78,-18,-64,-118,-12,-8,51, 
  /* [86][0][][] */ 0,69,81,127,69,-35,77,31,-32,6,-87,-57,-4,117,-93,-77, 
  /* [87][0][][] */ -42,27,127,-36,-113,-36,30,23,42,-37,14,50,-41,34,12,-16, 
  /* [88][0][][] */ -5,-78,-106,28,16,26,-39,24,17,-50,-76,-100,127,-46,-3,48, 
  /* [89][0][][] */ 46,7,18,-127,36,-39,-44,33,119,-26,-1,-71,-16,-51,38,-55, 
  /* [90][0][][] */ -14,48,21,20,-33,42,34,127,24,-46,7,78,60,6,-58,74, 
  /* [91][0][][] */ -61,-2,7,38,104,22,-11,-115,-58,-3,-29,2,-127,-126,-51,13, 
  /* [92][0][][] */ -53,36,40,-13,-127,-23,-93,79,-61,52,108,80,-66,24,76,-37, 
  /* [93][0][][] */ 107,63,100,14,-127,-79,10,6,-18,-57,-23,-42,-14,-38,16,-15, 
  /* [94][0][][] */ -47,-127,15,-92,-15,19,-31,28,71,-17,15,48,2,80,-35,50, 
  /* [95][0][][] */ -32,-80,-6,-92,127,65,-28,28,77,31,-77,66,-44,123,-57,20, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0022441118489950895, 0.0013412556145340204, 0.0016355578554794192, 0.0026340384501963854, 0.0021171106491237879, 0.0011195898987352848, 0.0018647304968908429, 0.0023385516833513975, 0.0028873949777334929, 0.0010118088684976101, 0.0019751954823732376, 0.0020667312201112509, 0.0018434009980410337, 0.0021906336769461632, 0.0031442977488040924, 0.0027279870118945837, 0.0013611786998808384, 0.0014848210848867893, 0.0020313260611146688, 0.0021829183679074049, 0.0015180386835709214, 0.0013845621142536402, 0.00084714055992662907, 0.0021403785794973373, 0.0016163091640919447, 0.0028449904639273882, 0.00058741774410009384, 0.002316636499017477, 0.0020304608624428511, 0.0021406584419310093, 0.0013681097188964486, 0.0028286089655011892, 0.0020084157586097717, 0.0027600328903645277, 0.0022141458466649055, 0.00184971047565341, 0.0024516144767403603, 0.0015430693747475743, 0.0017970686312764883, 0.0020885947160422802, 0.0019836300052702427, 0.0023018319625407457, 0.0018829538021236658, 0.0031272722408175468, 0.0034790011122822762, 0.0016687241150066257, 0.0021599640604108572, 0.0016769295325502753, 0.0017094393260776997, 0.0031469115056097507, 0.0020520905964076519, 0.004240020178258419, 0.0016076533356681466, 0.0015223118243739009, 0.0021713350433856249, 0.0024304145481437445, 0.002371886745095253, 0.0023852847516536713, 0.00082469492917880416, 0.0033488108310848475, 0.0032802408095449209, 0.0015926349442452192, 0.0020394120365381241, 0.0018815991934388876, 0.0022759931161999702, 0.0014270376414060593, 0.0014788937987759709, 0.002267628675326705, 0.0012915239203721285, 0.0022619205992668867, 0.0018195150187239051, 0.0024960145819932222, 0.0024461348075419664, 0.0020267781801521778, 0.0022525910753756762, 0.0019948389381170273, 0.0029394242446869612, 0.0020668543875217438, 0.0017938928212970495, 0.0026654389221221209, 0.0023735521826893091, 0.0016455897130072117, 0.0018514542607590556, 0.0030402150005102158, 0.0013204728020355105, 0.0016926442040130496, 0.0023241061717271805, 0.0036344793625175953, 0.00099285994656383991, 0.0034864356275647879, 0.0028750875499099493, 0.0019479062175378203, 0.00099474063608795404, 0.0025806843768805265, 0.0022821917664259672, 0.0026588949840515852, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -27749, -7039, 3768, -19456, 10191, -16729, 16000, 126, 6197, -7975, 17503, 15305, 2725, -24254, -8403, 16241, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.532593397423625e-05, 6.2355305999517441e-05, 6.467079947469756e-05, 5.1142891607014462e-05, 8.1434496678411961e-05, 0.00014890740567352623, 4.8696147132432088e-05, 7.1816662966739386e-05, 8.154102397384122e-05, 7.6327487477101386e-05, 9.619203774491325e-05, 6.5628424636088312e-05, 7.5710260716732591e-05, 5.9720292483689263e-05, 5.3718209528597072e-05, 7.9197554441634566e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -8,1,-2,-6,-38,-55,-34,-19,-18,-47,28,1,42,-72,45,24,-62,-13,43,24,83,44,-39,-1,-3,44,119,54,15,83,80,-25,16,16,13,-5,41,21,0,-4,127,31,24,4,0,7,-9,-39,29,-20,92,13,-72,10,30,11,-3,-38,19,41,14,37,-52,9,25,0,33,20,37,-8,6,12,24,33,26,50,51,-41,34,33,6,46,18,35,-63,24,16,60,10,-16,-69,16,18,2,69,75, 
  /* [1][0][][] */ 6,30,-30,-22,-10,-25,90,-47,-57,-6,-24,-26,24,-30,2,-47,-17,-32,-18,-24,-6,-105,96,-3,-20,10,16,66,-42,28,-49,14,-28,14,-22,4,-14,63,-26,67,27,47,16,-41,50,-57,20,21,-78,15,11,-98,-9,52,57,62,47,15,-68,-4,-53,-26,12,8,22,5,81,23,-33,-127,-19,10,17,69,3,19,-61,-27,62,-22,18,-11,11,-35,-7,-20,-25,42,-8,-8,47,17,73,-47,-18,62, 
  /* [2][0][][] */ 9,-20,17,-9,54,50,-62,-8,-22,33,-2,-31,13,-13,12,26,35,-6,-127,10,-6,-40,3,-2,6,-4,-40,1,-32,-22,0,82,-15,-20,11,26,-25,8,-5,-18,34,-18,-6,41,23,46,-25,9,-61,17,-8,35,-39,1,14,-80,25,12,62,34,-12,-32,-28,37,35,6,-24,-24,4,22,-10,-38,11,59,31,79,-32,-22,-22,-44,47,26,70,-35,-12,-44,-30,-55,-39,-51,-1,65,2,-34,65,-40, 
  /* [3][0][][] */ 34,-29,-43,-126,-42,-34,81,-39,40,127,-78,-6,5,-12,-11,61,36,65,7,34,-40,39,31,-26,-25,90,51,-15,-51,7,-53,62,20,-7,26,9,-21,-45,-24,66,22,9,-40,49,67,-45,-29,48,50,-24,56,-41,76,68,36,16,-4,-28,5,-37,-14,53,70,11,-8,-13,85,-56,-18,-17,-64,21,38,-33,28,-44,26,-32,127,2,13,-34,-22,-52,-32,-20,65,83,-29,29,-44,37,23,-70,-33,52, 
  /* [4][0][][] */ -46,74,42,23,-26,12,-17,-40,32,-53,13,-8,9,44,-60,24,-35,-23,-34,-75,20,-30,-62,35,3,-44,7,28,-20,127,-75,-2,33,-25,13,-54,91,46,-45,4,23,-2,4,-51,-38,-25,37,-25,2,15,-48,0,-67,5,51,18,18,33,-2,21,-42,-45,-22,24,36,14,-35,-14,1,-6,14,-57,-5,64,55,73,-22,1,-69,46,10,80,32,-71,37,-46,-22,-62,-48,-63,-39,-19,-5,-6,44,-3, 
  /* [5][0][][] */ -11,-5,22,-31,-40,-42,-21,0,27,10,-13,-15,-17,-29,13,-7,-15,10,-29,-20,-14,-2,-24,2,22,-34,73,-22,-11,55,-8,63,5,-75,37,10,-47,-5,-41,11,-37,-1,-34,34,2,37,-65,-5,-4,28,44,-29,12,-41,6,21,-8,-48,-2,-39,41,44,14,62,-22,19,100,-28,-24,-15,4,-3,2,17,29,5,5,5,127,53,-10,-18,-25,26,39,79,8,80,30,-36,-4,20,11,9,-32,53, 
  /* [6][0][][] */ 33,-87,89,-8,-63,108,-44,-102,-30,-43,-75,64,43,38,-28,87,-9,46,29,-29,-67,-45,-52,-59,-20,-45,11,80,-121,72,-20,-13,68,86,-36,-3,4,-18,42,-3,-45,30,63,-4,15,24,-73,21,30,-9,-85,-127,72,41,-45,-3,11,-36,-7,6,-36,-79,48,21,70,-71,-66,-51,-40,3,-29,-53,14,-76,25,-111,39,26,-69,71,-34,81,29,-86,57,-41,-23,14,-46,78,-39,104,40,-65,82,-68, 
  /* [7][0][][] */ 14,12,-44,74,-51,-16,63,15,-87,-26,59,26,-2,-39,5,-44,-36,-7,-7,-20,-73,-1,-43,-35,76,68,-24,60,-3,-3,-15,18,-76,-127,62,89,13,-3,-62,-7,-29,-27,2,-90,22,33,54,58,-18,46,-4,22,34,-36,39,-31,-19,3,-55,-22,44,34,0,-45,42,-62,113,-23,-96,-5,74,13,-35,-43,-105,-24,44,-26,77,-35,-13,-31,-80,-61,58,1,-92,11,-15,28,-32,-13,26,-11,90,-25, 
  /* [8][0][][] */ 18,-50,0,-8,-22,16,17,9,0,15,32,49,9,33,-44,7,80,-17,15,5,-6,-66,-41,-19,-34,-34,88,12,-17,72,21,-14,-1,8,-11,-5,-73,2,15,-9,-1,61,34,-29,31,-23,34,-5,43,10,50,14,-1,37,-24,-3,-5,121,-68,-6,0,-66,-56,15,-76,-23,-35,20,-2,-5,16,-24,-4,-127,67,-106,3,19,-50,32,-25,-6,18,67,78,-79,-42,68,-19,99,29,5,-65,7,-1,-60, 
  /* [9][0][][] */ -45,-53,-34,11,13,29,5,15,-47,-1,74,76,-46,39,23,-60,-17,53,-38,-32,5,60,3,4,-22,8,17,3,51,-13,43,7,-26,-10,6,79,-1,-20,44,-9,-26,-47,-4,-4,25,56,-19,66,-63,18,-2,59,122,-17,-4,3,19,-32,43,33,-17,-5,99,-5,2,20,73,-3,61,4,-22,41,8,-127,-29,-108,-20,-30,25,-21,14,41,1,-53,24,25,-48,-3,-20,98,42,32,71,23,-30,13, 
  /* [10][0][][] */ 11,40,11,18,8,21,-17,-29,46,-7,-27,11,0,6,-16,-58,-21,4,-2,-6,15,-15,-9,-30,20,-29,-94,28,-21,30,7,7,-4,16,-8,15,26,-13,9,-19,13,-28,33,-50,-20,9,-6,30,10,4,8,-5,-29,-27,2,11,-5,18,4,-13,-2,-26,-21,-15,-18,-11,-71,-30,-61,0,52,-28,-30,20,19,13,54,-28,-86,-9,-6,27,7,-1,2,5,-57,-127,-40,8,-1,-6,42,-31,4,9, 
  /* [11][0][][] */ 5,-22,10,1,-44,37,19,26,81,-29,-25,-47,28,4,21,-24,-19,36,8,-81,-9,41,10,-41,49,24,54,-10,-7,-62,-13,12,13,89,-96,15,10,-33,65,8,-67,40,-39,26,-26,22,-33,-16,39,-17,-20,7,-26,18,-60,77,-5,-12,12,-54,49,16,-16,-69,-24,-68,-127,-87,-20,-38,-102,20,61,24,-17,14,45,74,-118,-50,-3,-22,4,-14,-15,-6,49,56,8,-55,-11,-8,-40,31,71,54, 
  /* [12][0][][] */ 37,14,-20,-10,48,-3,18,45,41,-43,1,-3,14,-14,10,6,14,-54,-39,-6,13,62,2,82,-50,-30,-127,3,79,-46,25,-18,-38,-86,46,-10,5,-11,4,5,-11,-47,31,6,26,-15,37,-17,-73,-20,-64,79,85,-20,21,-64,-18,22,-42,-21,-4,11,63,-3,-34,-29,27,36,104,10,15,24,-6,-33,-21,-15,-42,-51,32,-70,3,-50,28,-53,-2,-35,-19,-104,-6,44,-56,-2,3,66,29,9, 
  /* [13][0][][] */ -12,11,-64,47,52,32,9,20,11,85,-17,59,-33,1,78,-78,-7,32,58,-10,-34,-26,-6,40,21,54,-46,46,-4,7,78,-19,-39,54,-36,57,42,-59,-39,-74,-8,-19,47,-14,40,56,-16,54,-76,9,-11,26,0,-70,67,32,6,-63,-45,-13,16,-15,12,-53,-8,71,127,61,53,-22,-59,0,45,72,-101,51,0,-100,121,-71,-34,-31,-1,-3,33,42,-61,-51,-37,-16,3,41,41,-5,82,14, 
  /* [14][0][][] */ -9,85,24,26,-64,-68,25,51,-64,-50,55,26,-75,5,103,-27,-58,43,-46,40,-6,41,-108,3,-62,29,-46,-115,-3,15,64,94,-73,45,28,9,1,-57,-15,-60,19,-63,63,-11,2,61,-81,40,-13,-29,84,39,-12,20,-21,55,-31,15,18,56,35,60,4,18,16,-56,12,-48,32,75,58,41,-60,37,9,17,24,-9,57,-7,-71,127,22,-116,97,-3,-12,-11,-116,-4,-11,-24,-19,19,49,51, 
  /* [15][0][][] */ 70,-24,40,50,64,-12,8,7,5,-1,-58,0,69,65,5,-34,-14,-15,-90,23,-4,-34,3,53,56,-32,59,28,35,-55,-67,46,39,30,-19,-65,64,49,47,36,58,40,-15,-26,-48,-115,41,-43,-41,-31,-37,-24,10,-69,-28,48,-2,7,-6,0,-13,-69,-30,17,12,33,-52,35,-37,-42,7,6,-20,-127,-63,-115,-16,5,-109,4,48,-40,34,7,-38,-21,-29,-23,-4,90,-18,-92,-35,-17,43,-60, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0027763519901782274, 0.0026501005049794912, 0.0027485089376568794, 0.0021735727787017822, 0.0034609660506248474, 0.00632856460288167, 0.0020695861894637346, 0.0030522081069648266, 0.0034654934424906969, 0.0032439182978123426, 0.004088161513209343, 0.0027892079669982195, 0.0032176859676837921, 0.0025381124578416348, 0.0022830239031463861, 0.0033658959437161684, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 5978, 531, -3380, 11622, -3874, 731, 3060, -908, 7501, -7341, -627, -3207, 12107, -3603, 561, -7418, -2186, 876, -14159, 131, -3180, 4412, -6152, -2420, 34, 4740, -12291, -8376, 1298, -4042, -888, 1282, 15444, -1593, 508, -1524, 861, 10538, -206, 11545, -2803, 5322, 377, 2246, 2901, 2499, 10423, -1717, -3448, 949, -2007, -1134, -956, -5859, -2854, 2383, 946, 3592, -547, 3198, -92, 3978, -2077, 15607, 10571, -4862, 15167, 16790, -314, 1369, 11139, -72, -260, 3847, -5656, 1556, 15119, 9144, 8409, 18958, 8408, -1488, 4685, 5187, -2062, -689, 16006, -10227, 7730, -584, -5118, -3668, -1076, 3144, 16791, -588, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.0001748654613038525, 0.0002551652432885021, 0.00020931167819071561, 0.00015529233496636152, 0.00014995891251601279, 0.00041507490095682442, 8.4107021393720061e-05, 0.00025503715733066201, 0.0002046574663836509, 0.00013599904195871204, 0.00026453693863004446, 0.00016279108240269125, 5.4898846428841352e-05, 8.4716193669009954e-05, 0.00026446962147019804, 0.00016513511945959181, 0.00025451567489653826, 0.00037639797665178776, 9.9294171377550811e-05, 0.00023512242478318512, 0.0001960746303666383, 0.00024821260012686253, 0.00012762004917021841, 0.00017930462490767241, 0.0031385216861963272, 0.00022615882335230708, 0.00016798828437458724, 8.5436615336220711e-05, 0.0003544407372828573, 0.0001141926331911236, 0.00020733436394948512, 0.00025493628345429897, 5.6986467825481668e-05, 0.00030325722764246166, 0.0001215523952851072, 0.00018591441039461643, 0.00023660046281293035, 0.00011295245349174365, 0.00021368855959735811, 9.2307069280650467e-05, 0.00045762563240714371, 0.00019665382569655776, 0.00016927241813391447, 0.00021215334709268063, 0.00015851952775847167, 0.00023636760306544602, 0.00014516124792862684, 0.000292621785774827, 0.00015154857828747481, 0.00031976765603758395, 0.0003289915039204061, 0.00017209317593369633, 0.00015873102529440075, 0.00014997439575381577, 0.00021479475253727287, 0.00025797064881771803, 0.0001176479781861417, 0.0003702540707308799, 0.00043641563388518989, 0.00017537400708533823, 0.00032067683059722185, 0.00028122984804213047, 0.00015683667152188718, 6.0809041315224022e-05, 0.0001697246334515512, 0.00030275687458924949, 0.00010708659829106182, 0.00010356136044720188, 0.00032146534067578614, 0.00040367318433709443, 0.00014384639507625252, 0.00029513612389564514, 0.00042021981789730489, 0.00018815950897987932, 0.00014100383850745857, 0.00026670441729947925, 8.8470696937292814e-05, 0.00021141579782124609, 0.00014734336582478136, 0.00014181924052536488, 7.6894866651855409e-05, 0.00024150781973730773, 0.00017706071957945824, 0.00048795848852023482, 0.00010844768257811666, 0.00037319876719266176, 0.00012489323853515089, 0.00017439087969250977, 0.0001664212322793901, 0.00023200073337648064, 0.00013903046783525497, 0.00024880302953533828, 0.0002559685381129384, 0.00014661767636425793, 0.00011423644900787622, 0.0003039351140614599, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ 15,-7,-2,-45,127,-19,40,-17,-22,13,-14,-24,-70,26,-20,-12,-5,-2,-2,-27,-12,30,-6,71,-16,-1,-11,31,24,29,16,-17,-80,14,-14,-34,5,-78,-10,-65,18,-29,32,4,-11,43,-106,-12,-19,-13,-4,70,-54,16,38,-24,-51,-23,11,14,7,-29,13,-127,5,-2,-63,-96,-15,7,-20,6,46,-8,20,34,-80,-14,127,-117,-1,9,-67,-16,-20,-5,-32,39,-5,-7,-29,-11,11,25,-16,8, -4,30,60,-95,-14,-19,127,-51,-13,-6,-43,42,-58,41,-109,41,1,61,104,-32,-3,127,97,127,8,39,99,100,127,49,127,-38,-119,-5,-126,-40,-23,-32,127,-105,-18,-127,-4,-21,45,-25,-35,-1,55,-13,35,127,-64,80,-86,0,-127,-22,1,64,-36,-127,-127,-103,-41,23,-13,-56,-2,4,-68,84,-127,-36,13,-29,-127,-62,-10,-98,-13,10,-4,-37,127,47,-78,54,-127,-13,-15,4,32,126,-74,-99, 12,-5,-35,-40,109,-25,18,-24,-40,36,-11,27,-42,21,1,6,-2,-1,1,4,14,-19,-10,69,7,19,-13,9,5,24,18,-24,39,13,-18,67,2,-120,-20,-5,1,-29,15,22,-28,-45,-105,-2,9,9,-20,63,4,-21,13,-15,62,-43,6,-16,11,-30,-76,-68,-11,-6,127,-93,21,18,-67,9,62,-4,28,19,-12,11,-34,-69,-11,-29,-98,-24,28,-32,-14,-17,-10,-36,-26,49,15,19,-21,3, 
  /* [0][1][][] */ -80,-2,57,-43,61,111,-46,-18,-23,-25,-25,-40,-122,31,15,60,-7,41,127,29,32,-19,91,-3,41,25,127,25,-23,34,16,-19,-46,-7,38,-13,2,-100,-63,-127,-8,-13,93,-47,-83,127,-127,-59,16,35,6,-43,-127,95,79,-22,-25,-32,40,-29,0,-23,124,-113,-42,29,-17,-122,-28,-7,-127,10,96,127,7,-84,-85,-41,-55,-127,-127,-2,-6,-56,33,15,-127,94,-31,127,92,-87,127,-24,-61,5, 18,127,127,109,-102,-127,110,-54,127,127,-59,-44,-121,127,-44,127,127,-127,98,127,127,-107,127,-97,-127,-127,107,127,-106,127,-1,127,-84,127,127,-88,119,75,-12,3,127,-18,-127,-77,127,-24,100,127,127,-127,127,-119,126,127,-124,127,-106,127,-127,127,-127,102,109,-104,117,127,-19,113,-82,-127,18,-127,-37,89,127,55,37,-127,81,-76,-21,127,127,127,119,74,-76,127,-75,47,-8,-15,-113,-47,-127,-29, -127,-32,10,-70,48,84,-64,-8,-58,5,-15,127,-127,39,22,107,-9,45,102,26,1,-48,0,1,47,-8,36,26,-17,29,15,-21,-127,-24,108,127,2,-127,-95,-48,-22,-41,20,-32,-71,-83,-114,-82,53,50,-15,-29,121,-44,127,-40,101,-35,48,-67,-7,-45,-109,-50,-104,7,-63,-127,-21,-2,-97,-11,40,-105,12,127,-73,-26,-54,30,-44,-23,-35,-66,2,16,-95,69,-28,-69,127,127,-46,-45,-39,-2, 
  /* [0][2][][] */ 23,-42,-78,-54,43,-17,-39,26,-24,9,41,-57,48,13,-23,-13,13,-3,-32,-33,0,-6,28,-27,-22,-1,21,24,-12,22,-24,12,29,8,-21,-22,-5,-28,14,-54,-16,45,38,56,-11,-5,-36,30,-60,-6,-43,-10,-2,-11,22,2,19,-25,5,-55,0,-2,-6,-79,-67,-7,105,23,18,17,-55,10,8,-26,26,-40,-17,21,-9,-82,-91,19,-44,-18,-12,-8,-11,3,-32,20,-29,-9,-36,-7,-11,15, -29,-77,-23,-127,-27,6,69,127,-79,70,127,-1,-123,6,127,82,3,-39,96,-73,-20,-60,120,28,-2,11,30,24,-29,27,-67,-68,-108,-18,-109,3,-127,-91,90,-38,-14,-26,-73,127,7,-36,20,16,7,-15,-6,-25,55,75,-37,-47,-31,-41,44,-91,126,19,102,-53,-127,-40,-46,-25,127,21,-34,19,17,-58,48,-52,3,-32,3,64,-107,-9,-74,-33,52,-127,-60,15,-60,15,29,14,32,-127,-31,127, -6,-8,-66,-38,39,-20,-41,21,-42,36,14,33,54,9,-5,-25,1,8,11,-53,7,-30,-43,-17,-16,45,13,31,-10,10,-59,-16,103,9,-31,-22,-22,-25,6,45,-23,7,-12,31,-6,-31,9,26,-56,-18,-30,-10,3,-12,43,-11,66,-13,15,-20,-4,6,13,-4,-35,-5,-35,57,2,23,-8,-7,-43,-63,4,-21,-25,17,84,39,-49,15,-15,-3,-5,5,8,17,24,6,-28,56,29,-45,-9,-2, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0076157129369676113, 0.01111291628330946, 0.0091159092262387276, 0.0067632668651640415, 0.0065309870988130569, 0.018077276647090912, 0.0036630157846957445, 0.011107337661087513, 0.0089132096618413925, 0.0059230090118944645, 0.011521070264279842, 0.0070898514240980148, 0.0023909457959234715, 0.003689546138048172, 0.011518138460814953, 0.0071919383481144905, 0.01108462642878294, 0.016392825171351433, 0.0043244441039860249, 0.010240014642477036, 0.0085394112393260002, 0.010810116305947304, 0.0055580879561603069, 0.0078090466558933258, 0.13668839633464813, 0.00984963309019804, 0.0073161991313099861, 0.0037209219299256802, 0.015436546877026558, 0.0049732993356883526, 0.0090297935530543327, 0.011102944612503052, 0.0024818656966090202, 0.013207410462200642, 0.0052938307635486126, 0.0080969147384166718, 0.010304385796189308, 0.0049192872829735279, 0.0093065304681658745, 0.0040201428346335888, 0.019930439069867134, 0.0085646361112594604, 0.0073721255175769329, 0.00923966895788908, 0.0069038174115121365, 0.01029424462467432, 0.006322039756923914, 0.012744218111038208, 0.0066002197563648224, 0.013926470652222633, 0.014328185468912125, 0.0074949748814105988, 0.0069130286574363708, 0.0065316613763570786, 0.0093547068536281586, 0.011235096491873264, 0.0051237861625850201, 0.01612524688243866, 0.019006704911589622, 0.0076378611847758293, 0.013966066762804985, 0.012248078361153603, 0.0068305260501801968, 0.002648345660418272, 0.0073918201960623264, 0.013185619376599789, 0.0046638185158371925, 0.0045102881267666817, 0.014000407420098782, 0.017580710351467133, 0.006264775525778532, 0.012853721156716347, 0.018301347270607948, 0.0081946933642029762, 0.0061409766785800457, 0.011615468189120293, 0.0038530619349330664, 0.0092075476422905922, 0.0064170747064054012, 0.0061764889396727085, 0.0033489130437374115, 0.010518110357224941, 0.0077113206498324871, 0.021251490339636803, 0.0047230962663888931, 0.01625349372625351, 0.0054393303580582142, 0.00759504409506917, 0.0072479508817195892, 0.010104059241712093, 0.0060550328344106674, 0.010835830122232437, 0.01114790141582489, 0.0063854698091745377, 0.0049752076156437397, 0.013236934319138527, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1096, 4961, 1160, 2753, 4557, 9221, -594, 3673, 8843, -764, 14333, 5283, 1284, 1173, 4659, 358, 3560, 7433, 417, 12026, 926, 8624, -1369, 1011, -10470, 817, 1817, 2846, 6563, 1186, 3544, 4034, 2761, 14714, 3693, 4146, 4651, 2049, 3196, 2883, 14336, 1431, 4204, 2936, 4360, 9701, 7759, 4372, 661, -1453, 2541, 5661, 4096, -1679, 8798, 74, 1083, 11686, 2255, 2197, 3378, 14603, 5150, -283, 17876, 7002, 1738, 5220, 4764, 7095, 2458, 1754, -2767, 4580, 978, 5027, 1032, 8557, 3552, 6301, 2394, 2295, 3455, 24206, 664, 9313, 4143, 1858, -973, 2222, 1899, 10189, 3187, 3493, 5186, 5100, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00027470622444525361, 0.00015123940829653293, 0.0001318257418461144, 0.00019532704027369618, 0.00012097719445591792, 9.1551963123492897e-05, 0.00013602450781036168, 0.00010875010048039258, 9.3646609457209706e-05, 0.00016156354104168713, 6.1609862314071506e-05, 9.1809124569408596e-05, 0.00014550997002515942, 0.00023727826192043722, 0.00011526374873938039, 0.000172952059074305, 0.00017356241005472839, 9.1502617578953505e-05, 0.00015848239127080888, 6.9299785536713898e-05, 0.00026015625917352736, 9.5193652668967843e-05, 0.00015567934315185994, 0.0001538228098070249, 7.5014329922851175e-05, 0.00013651249173562974, 0.00019331248768139631, 0.00011869817535625771, 0.00011856165656354278, 0.00016542042430955917, 0.00013852122356183827, 0.00015077319403644651, 0.00012344394053798169, 5.3150837629800662e-05, 0.00015084051119629294, 0.00015277703641913831, 0.00014773104339838028, 0.00016858322487678379, 0.00013167690485715866, 0.00013654897338710725, 6.0056237998651341e-05, 0.00015747487486805767, 0.00010930390271823853, 0.00011391183943487704, 0.00010783025936689228, 8.748449181439355e-05, 9.7080293926410377e-05, 0.00015615331358276308, 0.00023010571021586657, 0.00018740772793535143, 0.00021105699124746025, 0.00010747311171144247, 0.00013330348883755505, 0.00022004228958394378, 8.0888894444797188e-05, 0.00030713595333509147, 0.00020176701946184039, 6.1397702665999532e-05, 0.0001266371546080336, 0.0001408684765920043, 0.00012630206765606999, 6.475995178334415e-05, 0.00012303827679716051, 0.00017322663916274905, 4.9959031457547098e-05, 0.00011548027396202087, 0.00019165589765179902, 0.00013216304068919271, 0.00013884386862628162, 9.7020783869083971e-05, 0.0002192757383454591, 0.00017099153774324805, 0.00016797897114884108, 0.00013587684952653944, 0.00023028886062093079, 0.00013572156603913754, 0.00016303642769344151, 0.0001017946342471987, 0.00015325983986258507, 0.00013801385648548603, 0.00013483696966432035, 0.00011480669490993023, 0.00012256921036168933, 4.2450505134183913e-05, 0.00013551564188674092, 8.1793696153908968e-05, 0.00016137305647134781, 0.00020175469398964196, 0.00023625176982022822, 0.00023173462250269949, 0.00017386044783052057, 8.2941463915631175e-05, 0.00017872810713015497, 0.00011619860015343875, 0.0001123882393585518, 0.00012834894005209208, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 78,-6,40,96,-81,-49,91,33,102,127,-62,47,45,-31,5,59, 
  /* [1][0][][] */ -27,37,-84,36,127,76,-12,14,-26,29,-64,9,-35,57,-51,-37, 
  /* [2][0][][] */ -25,50,84,16,83,67,15,47,45,3,24,-8,70,-127,5,-3, 
  /* [3][0][][] */ 127,-20,33,17,12,12,-29,19,41,38,-69,-25,-18,43,-55,48, 
  /* [4][0][][] */ -83,-11,-4,19,-127,11,-83,-53,-34,16,-17,-76,-37,23,12,119, 
  /* [5][0][][] */ -83,11,29,-2,127,17,-16,35,-51,66,-14,-10,-47,37,-106,-44, 
  /* [6][0][][] */ -127,17,-59,45,11,-68,105,1,22,-20,-80,35,38,15,-71,19, 
  /* [7][0][][] */ 7,69,84,-44,99,21,67,3,69,33,-16,52,127,22,-29,-44, 
  /* [8][0][][] */ 17,-18,-25,51,-26,63,-47,-88,50,-10,54,8,127,0,-109,-13, 
  /* [9][0][][] */ -45,-127,-46,52,-41,-73,26,58,20,41,28,84,-72,37,-25,-35, 
  /* [10][0][][] */ -75,-78,-77,62,-96,84,76,-55,24,-44,10,-37,35,127,-86,52, 
  /* [11][0][][] */ -118,-38,-25,0,-51,77,89,-6,1,12,17,-125,-9,122,-95,127, 
  /* [12][0][][] */ -27,-117,-106,87,-127,-114,31,65,77,49,-62,63,-10,-35,-54,-2, 
  /* [13][0][][] */ -86,-11,-47,24,-16,1,47,25,-33,127,7,-29,45,33,37,-6, 
  /* [14][0][][] */ -125,-20,-10,-12,22,38,-57,-97,127,-18,24,3,103,-50,-82,-99, 
  /* [15][0][][] */ 5,-127,98,-39,-43,-13,3,50,35,-48,-104,-50,74,-56,-40,-59, 
  /* [16][0][][] */ -32,-55,14,-36,29,39,-25,-5,74,-127,47,-3,-32,-5,-81,-88, 
  /* [17][0][][] */ -9,-14,49,-88,-6,-5,-4,-25,61,-67,-8,83,127,-67,-24,-116, 
  /* [18][0][][] */ 73,26,-20,-127,14,-25,73,-33,49,87,33,95,-13,50,13,-102, 
  /* [19][0][][] */ -110,-96,-11,-90,-89,59,34,-22,23,-64,12,-127,-48,-24,-57,-38, 
  /* [20][0][][] */ 34,58,43,-80,41,-27,-29,74,-108,-127,40,-63,-25,67,11,-19, 
  /* [21][0][][] */ 80,-127,-118,30,91,18,57,80,-77,-92,-1,32,110,-86,-21,26, 
  /* [22][0][][] */ 62,-10,88,-8,8,-6,44,-5,30,127,31,26,11,-7,79,-21, 
  /* [23][0][][] */ -119,-46,-22,48,45,20,0,23,-17,1,3,-84,-44,18,69,127, 
  /* [24][0][][] */ 16,-36,70,12,63,-80,28,-60,54,127,-113,97,-19,-74,75,-108, 
  /* [25][0][][] */ 127,-73,105,91,43,30,-36,15,-59,64,40,-43,-19,-6,34,-49, 
  /* [26][0][][] */ -14,17,4,60,-60,127,-11,34,-55,-42,-86,43,-4,39,44,-122, 
  /* [27][0][][] */ 10,-19,-16,-47,-67,-4,-81,16,-127,-29,-55,-40,-105,38,-2,127, 
  /* [28][0][][] */ -127,0,4,45,51,-24,-124,-1,1,-85,-29,-66,10,-100,-87,-9, 
  /* [29][0][][] */ -20,-104,-32,110,-46,3,127,32,57,41,-121,41,36,-23,-27,81, 
  /* [30][0][][] */ 57,-84,-91,-21,-127,14,26,-48,10,-23,-10,-62,-6,15,-4,67, 
  /* [31][0][][] */ -127,16,14,47,-34,8,-27,-29,-35,-27,0,-26,-38,-76,-18,95, 
  /* [32][0][][] */ -114,-93,-127,-5,-110,-34,-8,-34,89,43,-69,-47,7,57,4,8, 
  /* [33][0][][] */ -17,-4,-89,72,-86,-105,25,6,-127,35,-36,-63,11,113,55,76, 
  /* [34][0][][] */ 53,90,41,44,-51,-16,63,-12,53,-127,-29,21,-20,-19,9,83, 
  /* [35][0][][] */ 16,-17,-43,-14,-127,12,75,-1,49,8,10,-29,10,25,26,54, 
  /* [36][0][][] */ 8,13,-33,87,127,-23,17,42,-49,22,-59,-88,55,-37,-16,23, 
  /* [37][0][][] */ -80,57,18,-42,68,-89,-60,-21,21,3,-39,44,60,-81,-2,-127, 
  /* [38][0][][] */ 54,106,38,-31,-43,-78,-127,-50,-4,-31,53,79,-51,-76,54,-32, 
  /* [39][0][][] */ -43,-25,-26,32,-11,45,84,-12,-39,12,21,-13,-30,127,39,115, 
  /* [40][0][][] */ 127,92,112,97,-18,-73,3,-11,-88,79,-46,-16,-18,-24,70,-12, 
  /* [41][0][][] */ -44,-13,-3,33,-120,127,23,53,-48,-11,-99,-27,12,27,28,-97, 
  /* [42][0][][] */ -21,-73,-3,-83,76,50,92,13,-53,-127,-88,-58,3,-8,46,88, 
  /* [43][0][][] */ -50,-114,-44,51,103,-29,-29,127,-77,-38,-79,-51,100,14,-27,29, 
  /* [44][0][][] */ -19,-82,-68,-88,33,58,30,7,19,-93,-36,57,-10,68,21,127, 
  /* [45][0][][] */ -3,-39,-77,-12,-127,45,16,-47,37,-39,57,-79,-18,19,-45,67, 
  /* [46][0][][] */ 52,-27,-13,18,117,-119,35,95,-20,-11,24,77,-33,-34,42,-127, 
  /* [47][0][][] */ -99,9,-19,104,45,12,27,-7,-10,127,15,25,-61,72,-39,107, 
  /* [48][0][][] */ 58,-8,-95,-83,44,-67,18,78,40,-80,0,40,-59,24,-49,-127, 
  /* [49][0][][] */ 66,70,-12,47,-42,-23,80,40,-22,127,-46,66,-66,-37,106,104, 
  /* [50][0][][] */ 2,8,14,-18,-127,4,-4,-39,51,16,39,62,-9,-52,32,10, 
  /* [51][0][][] */ -13,-29,-61,-127,-59,57,65,1,-24,-37,40,-91,6,54,11,65, 
  /* [52][0][][] */ -3,-56,-12,-94,73,-97,13,-18,46,-14,127,-43,33,36,-25,88, 
  /* [53][0][][] */ -28,-37,13,-5,-41,-127,21,-93,-13,65,-74,60,-17,16,59,-39, 
  /* [54][0][][] */ 32,105,46,-2,-127,-18,-118,-95,-38,43,66,87,-104,-45,67,30, 
  /* [55][0][][] */ 1,-8,-13,71,-21,10,7,-5,0,127,3,65,-6,3,2,20, 
  /* [56][0][][] */ 61,-95,-57,83,-29,90,-13,47,127,28,32,72,-25,-79,49,60, 
  /* [57][0][][] */ 120,84,74,-71,87,-8,51,-34,127,-78,-80,59,126,-56,50,-28, 
  /* [58][0][][] */ 72,-24,18,-45,42,-13,-49,127,54,120,0,69,65,6,43,-30, 
  /* [59][0][][] */ 5,41,51,-4,-23,-98,-17,9,-3,-13,-127,-126,-71,-70,47,-27, 
  /* [60][0][][] */ 42,-20,28,-12,52,11,45,-78,53,127,-47,38,8,-63,-44,-3, 
  /* [61][0][][] */ 68,68,14,-6,-68,-127,-18,-44,-51,-5,-25,7,-57,-43,117,65, 
  /* [62][0][][] */ -53,70,-59,51,-69,127,-74,58,-32,19,-43,25,-68,55,73,-109, 
  /* [63][0][][] */ 8,-6,-70,-127,3,-34,66,-26,-15,-60,-50,16,-58,68,11,-17, 
  /* [64][0][][] */ -24,43,19,-5,41,-85,27,89,-127,-2,-74,-21,-60,81,81,49, 
  /* [65][0][][] */ -38,-42,-46,21,65,21,-58,-27,-73,-32,31,-21,-127,37,-36,40, 
  /* [66][0][][] */ -13,49,3,53,-25,127,-40,11,-42,40,-49,59,-26,26,29,-109, 
  /* [67][0][][] */ 8,-37,-33,-8,25,-104,56,-53,-10,31,37,127,-74,2,11,-122, 
  /* [68][0][][] */ -7,-127,-4,48,15,18,13,56,61,66,59,31,-23,66,-16,-45, 
  /* [69][0][][] */ -25,41,60,-15,5,-23,-45,127,-10,74,74,67,37,-30,56,-70, 
  /* [70][0][][] */ 58,42,53,-40,68,-14,-75,-74,-127,-91,-33,27,-21,70,-79,21, 
  /* [71][0][][] */ 38,-60,72,-21,103,-14,13,48,-56,89,-127,-24,80,96,-42,14, 
  /* [72][0][][] */ 1,66,21,27,-106,-44,-122,-97,-64,85,-36,53,47,127,-114,7, 
  /* [73][0][][] */ 9,-55,-31,-52,48,-115,32,-30,89,79,96,-21,38,-15,-83,127, 
  /* [74][0][][] */ 16,-6,-44,80,-78,16,116,46,93,52,15,127,116,41,-44,12, 
  /* [75][0][][] */ -15,36,-26,61,-30,127,-49,38,-36,62,-64,70,-16,41,15,-114, 
  /* [76][0][][] */ -66,88,-58,48,-77,22,-10,-2,39,34,-70,-64,44,-50,-127,54, 
  /* [77][0][][] */ 96,127,-116,80,59,76,84,29,21,21,82,-41,93,25,79,29, 
  /* [78][0][][] */ 9,-51,7,-43,76,-127,8,-22,46,67,99,-16,-6,-5,-37,101, 
  /* [79][0][][] */ -63,57,20,-22,5,-11,-40,-15,-127,8,91,18,104,37,-93,-33, 
  /* [80][0][][] */ -127,29,26,5,27,85,40,-95,-117,4,-72,-73,-60,-62,27,115, 
  /* [81][0][][] */ 89,68,-39,11,21,-36,75,122,-100,103,-70,-54,-25,50,127,117, 
  /* [82][0][][] */ 83,68,13,-13,27,-61,59,-58,54,40,-70,48,127,-51,11,-77, 
  /* [83][0][][] */ -10,-46,43,-8,-3,20,-7,-92,35,-8,73,11,41,-53,-39,-127, 
  /* [84][0][][] */ -127,-54,-43,-25,-14,123,99,18,60,61,52,90,82,103,-92,0, 
  /* [85][0][][] */ 127,-49,113,-102,87,-21,-45,97,44,127,-38,10,-54,57,104,-22, 
  /* [86][0][][] */ -86,58,-13,20,44,72,6,16,77,48,127,-12,2,59,-6,-27, 
  /* [87][0][][] */ 25,-61,20,-46,47,-127,19,-27,52,-12,64,-20,27,-33,-49,71, 
  /* [88][0][][] */ -68,64,25,23,94,-37,20,26,-53,-71,91,-64,73,116,69,-127, 
  /* [89][0][][] */ -43,25,-11,32,-19,127,-30,36,-26,8,-3,30,-10,49,24,-84, 
  /* [90][0][][] */ 28,-59,18,19,127,-7,22,37,5,-60,-67,-38,0,-18,-59,32, 
  /* [91][0][][] */ 17,27,-7,11,28,-63,-122,74,-49,-7,-69,-127,-103,-82,12,-12, 
  /* [92][0][][] */ 40,37,25,10,-127,-48,36,35,-26,6,-2,-37,-19,-77,42,-2, 
  /* [93][0][][] */ -34,-127,-120,49,-88,-44,-12,66,36,33,-28,12,-92,10,16,-6, 
  /* [94][0][][] */ 120,1,127,-41,39,-18,46,10,42,92,-29,26,-17,-8,86,-8, 
  /* [95][0][][] */ -54,-78,-30,-4,127,-14,19,71,-37,17,-96,-42,25,-5,-43,-8, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0052298563532531261, 0.0028792954981327057, 0.0025096980389207602, 0.0037186355330049992, 0.0023031635209918022, 0.0017429660074412823, 0.0025896341539919376, 0.0020703841000795364, 0.0017828438431024551, 0.0030758462380617857, 0.0011729283723980188, 0.001747861853800714, 0.0027702185325324535, 0.0045173028483986855, 0.0021943908650428057, 0.0032926609273999929, 0.0033042808063328266, 0.0017420265357941389, 0.0030171873513609171, 0.0013193291379138827, 0.004952854011207819, 0.0018122964538633823, 0.0029638228006660938, 0.0029284781776368618, 0.0014281226322054863, 0.0025989245623350143, 0.0036802827380597591, 0.0022597755305469036, 0.0022571764420717955, 0.0031492735724896193, 0.0026371665298938751, 0.0028704195283353329, 0.0023501254618167877, 0.0010118854697793722, 0.0028717012610286474, 0.0029085688292980194, 0.0028125031385570765, 0.0032094870693981647, 0.0025068644899874926, 0.0025996188633143902, 0.0011433504987508059, 0.002998006297275424, 0.0020809273701161146, 0.0021686533000320196, 0.0020528722088783979, 0.0016655295621603727, 0.0018482143059372902, 0.0029728463850915432, 0.0043807518668472767, 0.0035678676795214415, 0.0040181023068726063, 0.002046072855591774, 0.0025378314312547445, 0.0041891643777489662, 0.0015399625990539789, 0.0058472533710300922, 0.0038412399590015411, 0.0011688893428072333, 0.0024109177757054567, 0.0026818537153303623, 0.0024045384488999844, 0.0012328998418524861, 0.0023424024693667889, 0.003297888208180666, 0.0009511199314147234, 0.0021985131315886974, 0.0036487444303929806, 0.0025161195080727339, 0.0026433090679347515, 0.0018470813520252705, 0.004174571018666029, 0.0032553363125771284, 0.0031979831401258707, 0.0025868229568004608, 0.004384238738566637, 0.0025838667061179876, 0.0031038869637995958, 0.0019379659788683057, 0.0029177605174481869, 0.0026275073178112507, 0.0025670258328318596, 0.0021856895182281733, 0.0023334722500294447, 0.00080817262642085552, 0.0025799463037401438, 0.001557188224978745, 0.003072219667956233, 0.003841005265712738, 0.0044977604411542416, 0.0044117630459368229, 0.0033099546562880278, 0.0015790393808856606, 0.00340262521058321, 0.0022121886722743511, 0.0021396470256149769, 0.0024435068480670452, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -4763, 13300, -27533, 1577, 11797, -14259, -37938, -4835, -8563, 9821, -14639, -11536, 5810, -5022, -344, -2066, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00017245984054170549, 0.00015183254436124116, 8.4396589954849333e-05, 0.00013757467968389392, 0.00013962865341454744, 0.00012091332609998062, 9.163792128674686e-05, 0.00014187305350787938, 9.0460969659034163e-05, 7.9557816206943244e-05, 0.000174574030097574, 0.00017148078768514097, 9.0294655819889158e-05, 6.8861161707900465e-05, 0.00013435909932013601, 0.00013372709508985281, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 32,57,18,-20,54,50,-45,58,-24,111,-2,38,-39,36,-16,42,29,74,54,-63,-56,73,5,54,58,38,35,46,-60,-53,-22,92,-34,26,-73,65,46,-127,-26,1,14,-13,68,-4,7,-55,-48,-7, 
  /* [1][0][][] */ -48,2,-90,-51,-6,104,-54,24,-9,-44,-48,29,66,-29,-23,-25,-34,-31,-18,15,-71,49,-111,-53,-54,-44,48,67,-38,-31,43,-39,17,-60,-30,52,16,-64,127,-40,-19,25,-61,-12,37,51,28,19, 
  /* [2][0][][] */ 25,2,79,-20,-14,-101,23,11,125,94,-84,23,117,-67,124,104,-66,-10,-33,50,115,-63,-58,-124,34,-26,54,-84,32,54,-67,13,51,-22,45,58,-57,28,13,-35,52,45,70,-13,38,-121,127,-42, 
  /* [3][0][][] */ 48,0,-26,-27,35,127,22,-15,43,-49,19,-13,-45,-14,17,51,-45,-71,35,-125,-2,-6,-34,-20,-49,87,126,61,-24,-38,16,36,67,-20,90,36,-30,-66,7,37,38,17,-8,6,27,26,-29,-22, 
  /* [4][0][][] */ 92,-9,29,-49,102,72,34,17,60,-11,-109,14,32,-25,5,4,-105,-114,-11,-87,-30,30,-38,-27,-67,120,-73,127,-53,-71,10,65,44,-44,20,-33,-7,-5,-18,53,-31,-2,13,44,-47,96,-38,-61, 
  /* [5][0][][] */ 5,-7,-67,-6,-22,69,14,-38,79,62,29,87,57,-27,43,-6,-56,127,-34,58,-4,7,-76,-22,38,2,-72,-56,-5,42,10,-54,-31,-2,41,10,-43,2,-102,19,102,-43,17,40,-22,-7,-46,37, 
  /* [6][0][][] */ 53,6,23,69,12,-29,106,-37,2,73,114,94,39,49,-44,57,31,-41,-48,59,61,-56,-30,85,-78,75,68,6,83,29,-22,22,65,-56,-93,13,87,25,15,12,16,79,58,-13,73,127,19,-18, 
  /* [7][0][][] */ -113,-18,-40,35,-67,-34,25,26,69,94,-54,-77,-95,10,-14,-15,-77,104,-4,101,-56,36,12,26,-31,-87,-33,-85,47,37,-8,-8,-11,-3,11,-47,-11,-49,127,3,3,29,8,-9,65,74,-38,-16, 
  /* [8][0][][] */ 0,-104,70,-54,70,-75,98,-20,-33,-109,30,21,-27,17,29,35,-2,8,-38,85,7,30,-15,40,71,-15,-72,-33,-127,-21,-57,-98,1,-61,-8,95,0,33,112,24,26,10,88,127,-7,-60,-53,78, 
  /* [9][0][][] */ 13,-49,6,-80,28,88,-42,29,30,-45,-52,-39,0,-64,127,-6,-10,-120,39,47,-71,67,64,-64,-28,-56,-15,63,47,54,-60,-38,-20,44,7,110,-26,-51,-66,-46,-11,8,28,88,60,72,-67,4, 
  /* [10][0][][] */ -8,20,-27,-4,25,19,-76,-59,59,36,52,-24,-49,-15,58,-51,-73,127,-10,65,-6,-4,31,4,-54,58,1,86,48,-2,-54,-7,88,15,-25,18,-3,-47,-52,4,-87,-10,36,-23,25,36,28,31, 
  /* [11][0][][] */ -22,39,-16,36,29,57,16,11,5,15,-127,-57,83,9,1,-32,-4,17,-34,-46,-16,-9,92,-7,41,9,-24,23,-21,31,-18,43,22,-7,-65,-3,49,67,90,22,38,-33,61,16,-44,-17,66,-3, 
  /* [12][0][][] */ -50,-20,46,9,-56,-69,14,7,-27,-47,-127,26,81,-102,31,53,45,113,79,-105,-44,54,-62,-84,19,-19,37,-25,-3,27,-9,68,77,69,20,-32,-40,-14,22,1,-28,8,33,17,33,-25,-42,-26, 
  /* [13][0][][] */ -69,-110,-64,-96,-11,39,32,10,-127,10,127,-67,64,24,126,-12,124,28,0,-103,93,-86,126,-20,-89,-10,-33,19,-26,-92,-99,-4,40,-46,-57,48,14,-47,78,-101,-22,54,45,49,56,-16,91,-77, 
  /* [14][0][][] */ 56,27,-66,8,-54,25,-96,-38,-37,41,55,45,-14,-80,12,-49,49,-102,34,8,89,-61,12,-27,-24,127,-86,-4,-74,-31,-98,13,125,51,71,-28,-81,13,-17,38,-14,-40,96,-21,-43,-46,-49,55, 
  /* [15][0][][] */ -72,10,33,4,85,-3,-8,24,35,75,-12,51,59,-23,-28,-36,22,34,-10,-21,7,-30,-54,-72,47,-63,-45,59,-18,24,32,-5,-52,-11,127,-11,-96,29,42,-20,-60,-23,3,-8,-47,-30,-10,10, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0073295431211590767, 0.0064528831280767918, 0.0035868550185114145, 0.0058469236828386784, 0.0059342174790799618, 0.005138816311955452, 0.003894611494615674, 0.006029604934155941, 0.0038445910904556513, 0.0033812071196734905, 0.0074193961918354034, 0.007287933025509119, 0.0038375228177756071, 0.0029265994671732187, 0.005710261408239603, 0.005683401133865118, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13534, -536, 14515, 1030, 12506, -898, 36181, 803, 8717, 33534, 6221, 20157, -3380, 11441, 30713, 28791, 737, -7724, -3626, 45119, 468, 18647, 188, 24054, 16626, 26599, -4631, -1737, -1869, 7617, 20061, 79, -83, -1403, 3354, 11898, 8280, 21095, 5248, 20345, 24665, -1364, 939, 8739, -2075, 6416, 37076, 25198, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.7941531597170979e-05, 0.00012559012975543737, 8.3934159192722291e-05, 8.0422993050888181e-05, 0.00012116963625885546, 0.00011177243868587539, 6.9817659095861018e-05, 0.00030613466515205801, 8.7468702986370772e-05, 7.0906331529840827e-05, 5.4831791203469038e-05, 0.00014777071191929281, 9.815895464271307e-05, 0.0001442561624571681, 4.9919286539079621e-05, 7.111979357432574e-05, 9.0718174760695547e-05, 7.4695162766147405e-05, 0.00014284295320976526, 4.6650511649204418e-05, 8.0872254329733551e-05, 5.3950385336065665e-05, 0.00019600251107476652, 0.00010093917808262631, 5.3113879403099418e-05, 8.784790406934917e-05, 8.0225829151459038e-05, 5.8075478591490537e-05, 0.00021052801457699388, 0.00016397138824686408, 9.015661635203287e-05, 0.00047164547140710056, 0.00011088549945270643, 0.00012894887186121196, 6.6405955294612795e-05, 8.0729696492198855e-05, 9.3272799858823419e-05, 9.4936760433483869e-05, 8.3193968748673797e-05, 0.00014219015429262072, 6.6073305788449943e-05, 0.00017965097504202276, 0.00035894705797545612, 7.41396434023045e-05, 0.00016780428995843977, 3.9185993955470622e-05, 4.7610734327463433e-05, 4.5999913709238172e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -127,95,-127,103,-98,68,-54,127,-127,-83,71,-29,39,-113,-35,-23,62,102,121,-50,77,-127,59,-101,-30,-49,81,127,-104,-23,-82,34,68,-119,70,-96,-50,-104,83,-78,-65,-65,127,-117,76,102,-69,-31, -97,71,-36,63,-93,69,-36,22,-111,-101,81,-17,112,-127,-45,-36,66,125,127,-69,127,-119,66,-109,-74,-73,79,120,3,-44,-48,95,90,-127,118,-81,-95,-127,127,-63,-88,127,114,-84,-9,127,-97,-74, -72,19,-22,52,-10,92,28,-15,-40,-78,57,-14,15,-67,-31,-32,28,71,43,-34,62,-64,22,-90,-70,-33,17,2,111,-27,-81,-21,59,-72,18,-14,-15,-47,26,-77,-127,-49,65,-8,-57,124,-47,-34, 
  /* [0][1][][] */ -76,101,-56,127,-62,75,-127,96,-106,-115,65,-100,124,-51,-59,-56,69,81,-37,-92,75,-119,127,-78,-114,-71,115,102,-127,-127,-113,52,127,22,122,-127,-117,-90,83,-81,-119,-111,125,-127,127,78,-53,-89, -116,127,-62,121,-127,127,-99,54,-97,-127,127,-127,127,-77,-127,-106,127,127,-43,-127,113,-79,116,-127,-88,-127,127,102,8,-105,-127,127,104,56,127,-81,-127,-84,95,-127,-95,115,65,-81,-52,119,-127,-127, -98,45,-82,73,-56,53,-30,-28,-20,-80,57,-55,76,16,-52,-41,49,64,-34,-44,50,-44,43,-75,-124,-21,67,53,114,7,-87,-43,40,38,74,-17,-42,22,26,-37,-49,-50,3,-46,-70,113,-56,-45, 
  /* [0][2][][] */ -51,43,13,58,5,42,-126,3,-55,-44,35,-70,39,11,5,-122,77,26,-44,-47,-6,-37,66,-80,-127,-15,25,-16,-45,-97,-68,76,83,73,36,-67,-24,-18,38,-36,-62,-21,24,-5,81,38,-22,-95, -79,72,-48,35,-21,28,-116,-50,-98,-36,74,-74,17,-29,-32,-127,63,50,-55,-31,-19,-53,39,-70,-79,-71,57,2,-5,-61,-24,47,56,84,46,-42,-60,-34,11,-60,-5,67,43,-62,-16,78,-25,-113, -50,98,-58,7,-13,19,-88,-33,-1,5,32,-25,57,-69,2,-32,50,37,-24,-17,34,-28,-12,-67,-66,5,15,-2,56,34,-26,-24,55,72,39,-6,-45,-2,-10,-3,28,-7,14,17,-28,88,-41,-76, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028875151183456182, 0.005337580107152462, 0.0035672015510499477, 0.0034179771319031715, 0.0051497095264494419, 0.004750328604131937, 0.0029672503005713224, 0.013010722585022449, 0.0037174196913838387, 0.0030135191045701504, 0.0023303511552512646, 0.0062802550382912159, 0.0041717556305229664, 0.0061308867298066616, 0.0021215695887804031, 0.0030225911177694798, 0.0038555224891752005, 0.0031745443120598793, 0.0060708252713084221, 0.0019826467614620924, 0.0034370708744972944, 0.0022928912658244371, 0.0083301067352294922, 0.0042899148538708687, 0.0022573398891836405, 0.0037335359957069159, 0.0034095975570380688, 0.0024682078510522842, 0.0089474404230713844, 0.0069687841460108757, 0.0038316561840474606, 0.020044932141900063, 0.0047126337885856628, 0.0054803271777927876, 0.0028222529217600822, 0.0034310119226574898, 0.0039640939794480801, 0.0040348120965063572, 0.0035357435699552298, 0.0060430816374719143, 0.0028081154450774193, 0.0076351664029061794, 0.015255249105393887, 0.0031509348191320896, 0.0071316822431981564, 0.0016654047649353743, 0.0020234561525285244, 0.0019549962598830462, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 1710, -1125, 620, -1658, 3270, -607, 6706, -3783, 996, 408, 1305, 5205, 576, -54, 877, 5580, -1346, 3402, 3949, 491, -1494, 2376, -1243, 4757, 1706, 1921, 1350, -377, 4821, -843, 2794, -1673, -653, 2754, -570, 2005, 1398, 1608, 1012, 4511, 1944, 7558, -3604, 856, 7162, -336, 1805, 1491, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00024241014034487307, 0.00026074741617776453, 0.00033737407648004591, 0.00023310116375796497, 0.0002326793473912403, 0.00027723400853574276, 0.000134912712383084, 0.00016557185153942555, 0.00025617281789891422, 0.00029118396923877299, 0.00026149005861952901, 0.00014574085071217269, 0.00031371417571790516, 0.00038083278923295438, 0.00021129037486389279, 0.00016210296598728746, 0.00028226326685398817, 0.00025388403446413577, 0.00021868830663152039, 0.00037355598760768771, 0.00021633933647535741, 0.00021634776203427464, 0.00018861354328691959, 0.00017933684284798801, 0.00018943331087939441, 0.00022371976228896528, 0.00026788801187649369, 0.00032319145975634456, 0.00017039114027284086, 0.00024477561237290502, 0.00017624064639676362, 0.00021315763297025114, 0.00017151521751657128, 0.00023435782350134104, 0.00028567027766257524, 0.00025038194144144654, 0.00026759639149531722, 0.00021022075088694692, 0.00017787369142752141, 0.0002031260373769328, 0.00030934429378248751, 0.00011253175034653395, 0.00013984311954118311, 0.00034759819391183555, 0.00011846798588521779, 0.00030167022487148643, 0.00031319120898842812, 0.00031344193848781288, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 55,28,127,-15,62,91,-58,-43, 
  /* [1][0][][] */ 26,-110,-127,3,50,34,19,-9, 
  /* [2][0][][] */ -127,-11,-58,-22,54,21,-62,-42, 
  /* [3][0][][] */ 42,81,115,-75,-21,-127,-27,-10, 
  /* [4][0][][] */ -127,30,-43,-27,36,15,-50,-73, 
  /* [5][0][][] */ -92,4,-54,-15,2,37,-50,-127, 
  /* [6][0][][] */ -35,-123,-127,46,105,15,0,32, 
  /* [7][0][][] */ -50,-127,-94,-83,-36,-54,26,81, 
  /* [8][0][][] */ 90,13,-22,16,106,-53,-127,26, 
  /* [9][0][][] */ -37,51,-39,74,-61,-58,127,-25, 
  /* [10][0][][] */ -40,127,40,63,100,-24,7,60, 
  /* [11][0][][] */ -105,-22,-29,7,-121,127,125,2, 
  /* [12][0][][] */ 94,33,-127,34,-2,-57,-75,-27, 
  /* [13][0][][] */ 62,-9,-45,21,5,-127,-5,-42, 
  /* [14][0][][] */ 12,-54,103,23,127,-117,-77,45, 
  /* [15][0][][] */ -25,-42,4,127,55,97,-56,25, 
  /* [16][0][][] */ 92,29,-36,43,62,-89,-127,-6, 
  /* [17][0][][] */ 73,127,48,90,42,72,36,-96, 
  /* [18][0][][] */ 42,-4,6,-19,127,-16,17,9, 
  /* [19][0][][] */ -1,127,31,18,-95,25,14,-15, 
  /* [20][0][][] */ -32,25,65,-126,24,12,-19,127, 
  /* [21][0][][] */ -47,53,33,-87,29,63,-23,127, 
  /* [22][0][][] */ -56,-54,-87,14,-127,99,95,-19, 
  /* [23][0][][] */ 93,9,-127,41,24,-53,-57,-34, 
  /* [24][0][][] */ -80,48,32,-26,2,91,-120,127, 
  /* [25][0][][] */ -113,-55,-127,24,-46,-64,59,109, 
  /* [26][0][][] */ 36,-10,-52,-36,108,-22,127,-52, 
  /* [27][0][][] */ 127,-83,12,82,-8,30,1,89, 
  /* [28][0][][] */ 81,75,35,-33,127,-91,49,-23, 
  /* [29][0][][] */ -35,-2,-25,-43,-70,30,127,-16, 
  /* [30][0][][] */ 60,-112,-59,-36,-127,10,24,-76, 
  /* [31][0][][] */ 17,28,9,-19,-127,10,-34,-18, 
  /* [32][0][][] */ 53,-40,-76,76,-21,-97,103,-127, 
  /* [33][0][][] */ 37,127,20,17,94,-33,-41,-23, 
  /* [34][0][][] */ -127,-58,103,23,-12,113,93,4, 
  /* [35][0][][] */ -40,80,127,-23,-58,-69,-31,17, 
  /* [36][0][][] */ -96,5,127,-17,-41,114,111,18, 
  /* [37][0][][] */ -22,-110,-22,-127,-74,-62,93,31, 
  /* [38][0][][] */ 37,-5,82,-45,42,59,-127,13, 
  /* [39][0][][] */ -10,77,-127,-2,-32,8,11,65, 
  /* [40][0][][] */ 57,-36,19,30,14,-5,6,127, 
  /* [41][0][][] */ -57,104,73,-21,-36,127,-58,41, 
  /* [42][0][][] */ 83,-121,-112,-25,-127,6,6,-89, 
  /* [43][0][][] */ -6,-61,39,-48,127,-18,3,47, 
  /* [44][0][][] */ 19,127,84,-3,31,83,-60,49, 
  /* [45][0][][] */ -49,29,21,69,-116,60,-127,12, 
  /* [46][0][][] */ -55,-53,67,35,-127,-109,-15,-15, 
  /* [47][0][][] */ -20,62,25,-73,-127,38,-1,72, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023637339472770691, 0.0025425401981920004, 0.0032897242344915867, 0.0022729623597115278, 0.0022688491735607386, 0.0027033004444092512, 0.0013155298074707389, 0.0016144861001521349, 0.0024979333393275738, 0.0028393261600285769, 0.002549781696870923, 0.0014211145462468266, 0.0030590174719691277, 0.003713489044457674, 0.0020602860022336245, 0.0015806610463187099, 0.0027523406315594912, 0.0024756155908107758, 0.0021324229892343283, 0.0036425329744815826, 0.0021095182746648788, 0.0021096004638820887, 0.0018391649937257171, 0.001748708076775074, 0.0018471584189683199, 0.0021814845968037844, 0.0026121679693460464, 0.0031514300499111414, 0.0016614788910374045, 0.0023867995478212833, 0.0017185171600431204, 0.0020784935913980007, 0.0016724396264180541, 0.0022852160036563873, 0.0027855620719492435, 0.00244146678596735, 0.0026093244086951017, 0.0020498561207205057, 0.0017344409134238958, 0.0019806758500635624, 0.0030164066702127457, 0.0010972936870530248, 0.00136360595934093, 0.0033894195221364498, 0.0011551777133718133, 0.0029415772296488285, 0.0030539180152118206, 0.0030563627369701862, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 3412, 2574, 21844, -1768, 3678, -15052, 2457, -20289, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.994318391662091e-05, 0.00011643957259366289, 0.00012707238784059882, 0.00010285399912390858, 0.00012795387010555714, 0.00015220568457152694, 7.5606381869874895e-05, 7.3997296567540616e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -53,-25,-12,-78,-23,-14,97,75,-99,-95,-29,-5,-65,1,-70,8,-86,7,5,127,66,-27,0,105,84,71,19,12,-99,-47,-99,-65,-32,99,58,-66,13,-47,102,-23,19,-20,-8,-116,64,-58,-21,-90, 
  /* [1][0][][] */ -12,70,-18,-35,-61,50,-21,-51,-33,65,-7,19,53,47,-46,-9,-31,-127,80,-54,123,-2,-63,34,71,-10,-89,74,37,-18,72,20,-32,-16,2,-1,-14,89,-26,-22,44,31,-16,22,104,15,-26,62, 
  /* [2][0][][] */ -12,-20,121,6,96,-39,-21,22,-36,6,-3,46,2,-35,-34,-127,-55,-102,-30,19,-106,10,-29,-30,-40,19,-6,-43,-33,4,-29,-15,-11,13,27,-8,26,-36,-60,14,25,-33,41,-38,-32,-35,-65,-44, 
  /* [3][0][][] */ 44,2,53,7,16,-48,46,84,-58,-36,43,-32,-59,49,-28,44,55,22,-34,21,-109,-73,122,19,15,-1,-76,-18,-66,70,111,-52,10,-127,-47,35,-30,-94,-20,78,-81,-73,52,10,-109,-66,57,2, 
  /* [4][0][][] */ 11,-6,67,-37,-5,-22,-4,-12,-52,-8,-14,-9,48,-67,35,-87,55,39,-14,-30,14,23,20,24,6,-2,52,2,21,24,-127,-18,-12,-19,10,16,33,-9,31,13,-47,-14,-75,39,-7,-104,9,22, 
  /* [5][0][][] */ 30,-45,46,46,30,8,31,10,-80,-7,-53,29,33,2,7,-39,91,67,-17,-10,79,-63,127,-84,-28,56,-6,58,23,1,-40,-44,-18,-43,-51,-4,38,25,56,4,-72,30,32,28,30,5,73,-5, 
  /* [6][0][][] */ -36,51,-109,65,48,40,46,27,-23,5,56,-77,-76,-9,-34,34,-127,24,-14,75,18,56,-87,-74,-3,4,25,68,-17,-40,-37,-16,39,71,-36,-21,-1,8,72,-22,65,66,-109,-54,-35,100,-65,-25, 
  /* [7][0][][] */ 51,79,-69,28,17,70,112,84,42,93,-77,-8,-43,-3,-64,-45,55,49,127,124,90,7,127,14,94,81,-32,78,-99,45,14,-89,22,-45,-8,29,6,115,-57,76,-56,69,-3,-86,86,-10,50,-21, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0029725853819400072, 0.0049486816860735416, 0.0054005761630833149, 0.0043712947517633438, 0.0054380390793085098, 0.0064687412232160568, 0.0032132712658494711, 0.0031448851805180311, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -20, 6140, -970, -1647, 1885, -1060, 1268, -3834, -3198, -261, -10732, -521, 860, -397, -2211, 2292, 4736, 2885, -296, -4222, -7438, -288, 23792, -6017, -3529, -73, 3394, -5394, 219, -1411, -6856, 15627, 5514, 2286, 5555, 1126, -29, -623, 13050, -3209, 5819, 1003, 4073, 284, -126, 9084, 794, -2219, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00026961369439959526, 0.00015823153080418706, 0.00059331476222723722, 0.0002826059062499553, 0.00026861389051191509, 0.00037040680763311684, 0.00023528383462689817, 0.00031459311139769852, 0.00012787891319021583, 0.00022567824635189027, 0.00014309368270915002, 0.0011879251105710864, 0.00036263480433262885, 0.00076557259308174253, 0.00043162339716218412, 0.00085830758325755596, 0.000289510702714324, 6.3244406192097813e-05, 0.00022146941046230495, 0.00032363826176151633, 0.00028689714963547885, 0.00026557085220701993, 6.6413238528184593e-05, 0.00042833326733671129, 0.00017875738558359444, 0.00039305997779592872, 0.00045439382665790617, 0.00023813081497792155, 0.00027063023298978806, 0.000309324124827981, 0.00013793313701171428, 8.5854058852419257e-05, 0.00010693334479583427, 0.00024925178149715066, 0.00012518299627117813, 0.00035592771018855274, 0.0041992464102804661, 0.00034123469959013164, 0.00010391422256361693, 0.00021651494898833334, 0.00021293404279276729, 0.00015289972361642867, 0.00034425660851411521, 0.00022859351884108037, 0.00021207361714914441, 9.2546739324461669e-05, 8.3724364230874926e-05, 0.00017992986249737442, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 29,-53,13,21,-19,-67,-64,79,-47,25,-1,19,36,-23,-2,12,107,-28,26,28,2,-5,-127,25,17,-23,-7,-40,-49,98,-33,-121,33,-22,-53,-81,-7,-29,-13,-7,-31,41,15,41,-11,66,127,-21, -127,-88,-21,127,-72,64,-99,127,-2,35,22,17,49,-2,-1,-36,-30,28,-3,10,11,127,-7,127,127,-38,-38,43,52,-127,-24,-111,65,-12,-20,-115,18,17,-85,6,-127,-16,-105,-127,33,42,32,127, -14,33,13,26,-23,61,49,68,-7,-48,20,28,-20,-3,-6,8,-87,47,-55,-26,-1,-17,119,36,-21,1,13,1,6,62,-1,-27,-24,-28,-24,76,-2,8,25,100,17,-51,23,-48,-14,57,-35,8, 
  /* [0][1][][] */ -9,15,-23,22,28,-93,117,-75,5,14,45,45,127,12,1,-24,-28,-67,32,64,64,-39,28,20,-54,127,-98,-20,127,-103,25,-127,-50,-10,-88,-8,15,-55,-38,5,101,127,14,-112,-66,-49,8,87, 87,-127,127,-6,127,105,-69,-42,39,127,127,-127,-102,127,127,127,127,98,127,127,127,115,4,-12,86,-110,-127,127,20,124,127,-22,-127,127,127,127,-127,127,-127,-87,34,32,-127,4,127,-127,-23,95, 14,63,-38,1,-54,127,-111,97,87,-82,50,94,-31,10,8,-62,-12,35,-122,11,17,-82,-54,13,69,-10,-20,104,-77,-30,28,-94,-45,2,68,-11,30,-4,-1,-51,99,-21,28,74,-68,99,66,-90, 
  /* [0][2][][] */ -13,71,10,-34,-23,-80,-10,3,-6,-6,24,10,-20,-33,0,5,-66,19,24,-43,19,-35,122,4,-92,-5,48,-10,5,15,-1,58,6,-28,-86,8,-3,-2,31,22,-22,-20,6,41,-18,-4,-2,42, 43,1,-34,-43,3,9,127,-75,127,-36,-15,22,-90,-41,-33,-69,-21,127,2,12,1,3,-13,-44,-78,54,95,0,-84,8,-31,-37,-9,-28,-33,-4,62,-23,13,127,-106,-31,-15,114,30,19,11,-109, -22,38,6,-7,-27,11,12,-39,-28,-19,-3,23,5,-21,-19,12,55,73,-23,-38,-5,-44,-68,-3,52,-24,33,-37,0,9,-4,-37,6,-43,-18,-41,-21,1,33,47,-13,-28,4,48,-17,1,61,-59, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011458582244813442, 0.0067248400300741196, 0.025215877220034599, 0.012010750360786915, 0.011416090652346611, 0.015742288902401924, 0.0099995629861950874, 0.013370206579566002, 0.0054348534904420376, 0.0095913251861929893, 0.0060814814642071724, 0.050486817955970764, 0.015411978587508202, 0.032536834478378296, 0.01834399439394474, 0.03647807240486145, 0.012304204516112804, 0.0026878872886300087, 0.0094124497845768929, 0.013754625804722309, 0.01219312846660614, 0.011286760680377483, 0.0028225625865161419, 0.018204163759946823, 0.0075971889309585094, 0.016705049201846123, 0.019311737269163132, 0.010120559483766556, 0.011501784436404705, 0.013146275654435158, 0.0058621582575142384, 0.00364879728294909, 0.0045446669682860374, 0.010593200102448463, 0.005320277065038681, 0.015126926824450493, 0.17846797406673431, 0.014502475038170815, 0.0044163544662296772, 0.0092018852010369301, 0.0090496968477964401, 0.0064982380717992783, 0.014630905352532864, 0.0097152246162295341, 0.0090131284669041634, 0.0039332364685833454, 0.0035582853015512228, 0.0076470188796520233, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2029, 2808, 6157, 2357, 2348, -1837, 3091, 7979, 2005, -452, 5180, -2272, 7501, -1371, 2388, 28450, -336, 2417, 182, 3613, 3383, 3941, 622, 21673, 3391, 5150, 11632, 1597, 4539, 7731, 412, 1454, 282, 1972, 211, 619, -3186, -409, 1740, 2429, 8265, 1692, 4748, 3994, 4390, 1928, 1982, 5561, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00027391340699978173, 0.00028470723191276193, 0.00014244815974961966, 0.00017447803111281246, 0.00026227365015074611, 0.00024164818751160055, 0.00024199797189794481, 0.00011123750300612301, 0.00025391994859091938, 0.00030834978679195046, 0.00017236490384675562, 0.00020646053599193692, 0.00011844472464872524, 0.00025273527717217803, 0.00022557600459549576, 4.1000825149239972e-05, 0.00032319806632585824, 0.00018423244182486087, 0.00030136742861941457, 0.00018950032244902104, 0.00022393849212676287, 0.00019937970500905067, 0.00043071800610050559, 5.0015689339488745e-05, 0.00021267682313919067, 0.00014323812501970679, 8.436458301730454e-05, 0.00027885357849299908, 0.00018469151109457016, 0.00011311640264466405, 0.00052873650565743446, 0.00035373496939428151, 0.00028783499146811664, 0.00020035446505062282, 0.00035631886566989124, 0.00025802213349379599, 0.00021151463442947716, 0.00033709872514009476, 0.00029259061557240784, 0.00022655019711237401, 0.00010925757669610903, 0.0002685080689843744, 0.00018000046839006245, 0.0001956156047526747, 0.00015664609964005649, 0.00032251607626676559, 0.00033931134385056794, 0.00014646290219388902, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 74,127,-58,-71,51,82,6,83, 
  /* [1][0][][] */ 99,-70,69,-127,-69,89,-87,-67, 
  /* [2][0][][] */ -15,127,82,54,83,19,57,21, 
  /* [3][0][][] */ 114,47,-91,91,-10,-106,-127,-46, 
  /* [4][0][][] */ -39,33,-2,-38,-43,67,127,70, 
  /* [5][0][][] */ 37,59,-127,-87,34,65,37,-36, 
  /* [6][0][][] */ -44,127,54,62,74,22,29,-111, 
  /* [7][0][][] */ 127,-28,-18,24,9,-10,66,-5, 
  /* [8][0][][] */ 29,127,97,103,93,102,71,-92, 
  /* [9][0][][] */ 22,97,-127,-90,-5,99,-11,57, 
  /* [10][0][][] */ -91,-55,35,-66,-27,-34,-43,127, 
  /* [11][0][][] */ 32,-111,-127,-26,31,-11,53,-22, 
  /* [12][0][][] */ -59,-89,-87,13,-127,-9,-76,6, 
  /* [13][0][][] */ -2,18,-119,89,-127,-26,-10,-24, 
  /* [14][0][][] */ -54,-46,-127,-25,45,-17,-17,-67, 
  /* [15][0][][] */ 35,-104,-127,8,-69,-24,-6,-27, 
  /* [16][0][][] */ 127,-61,-24,44,-85,14,33,87, 
  /* [17][0][][] */ -40,127,125,-31,-45,-25,-43,-43, 
  /* [18][0][][] */ 1,-127,80,110,5,-93,28,-69, 
  /* [19][0][][] */ 127,-51,-72,32,-108,5,48,103, 
  /* [20][0][][] */ -30,-127,66,79,-13,-83,2,-78, 
  /* [21][0][][] */ -9,-52,-1,-25,127,11,71,16, 
  /* [22][0][][] */ -127,36,-58,47,59,46,-110,-106, 
  /* [23][0][][] */ -106,-45,49,13,-74,127,115,-45, 
  /* [24][0][][] */ -37,64,6,-24,-33,127,83,19, 
  /* [25][0][][] */ -67,-109,-127,-59,-52,18,-23,-77, 
  /* [26][0][][] */ -30,66,10,127,-108,33,-57,7, 
  /* [27][0][][] */ 12,-127,46,83,26,-50,5,-106, 
  /* [28][0][][] */ 19,127,43,47,96,-3,-7,-48, 
  /* [29][0][][] */ 109,-1,-24,-1,127,-111,-101,38, 
  /* [30][0][][] */ 39,-14,44,-127,19,-7,26,-40, 
  /* [31][0][][] */ 76,-43,8,60,-4,26,18,127, 
  /* [32][0][][] */ -50,-103,30,-71,-59,108,77,127, 
  /* [33][0][][] */ -4,65,41,-31,30,99,-127,82, 
  /* [34][0][][] */ 35,127,-49,-32,-15,22,-69,63, 
  /* [35][0][][] */ 52,-127,33,59,-22,-94,19,-84, 
  /* [36][0][][] */ -20,-46,-83,5,-127,-49,0,-10, 
  /* [37][0][][] */ -51,-127,78,87,-38,-89,-35,-41, 
  /* [38][0][][] */ -81,13,60,-82,-127,-76,-41,90, 
  /* [39][0][][] */ 95,-127,107,50,12,-97,-18,-56, 
  /* [40][0][][] */ 1,84,34,88,-127,-23,-99,44, 
  /* [41][0][][] */ 123,127,-77,-97,48,10,-25,41, 
  /* [42][0][][] */ -5,-61,-31,9,127,-2,68,14, 
  /* [43][0][][] */ 127,18,75,38,-59,-42,73,109, 
  /* [44][0][][] */ 102,46,-36,-2,83,-126,-127,17, 
  /* [45][0][][] */ 14,23,18,28,42,-127,-21,-22, 
  /* [46][0][][] */ 93,-34,12,127,57,44,15,88, 
  /* [47][0][][] */ -68,-86,35,44,-53,24,127,-50, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0035300652962177992, 0.0036691711284220219, 0.0018358039669692516, 0.0022485896479338408, 0.0033800576347857714, 0.0031142465304583311, 0.0031187543645501137, 0.0014335758751258254, 0.0032723990734666586, 0.0039738649502396584, 0.0022213566116988659, 0.0026607648469507694, 0.0015264591202139854, 0.0032571319025009871, 0.0029071159660816193, 0.00052839907584711909, 0.0041652224026620388, 0.0023742998018860817, 0.0038838798645883799, 0.0024421897251158953, 0.0028860124293714762, 0.0025695106014609337, 0.005550888366997242, 0.0006445783656090498, 0.0027408774476498365, 0.0018459847196936607, 0.0010872505372390151, 0.0035937319044023752, 0.0023802160285413265, 0.0014577902620658278, 0.006814104039222002, 0.0045587676577270031, 0.003709479933604598, 0.0025820727460086346, 0.0045920675620436668, 0.0033252660650759935, 0.0027258996851742268, 0.0043443674221634865, 0.0037707684095948935, 0.0029196708928793669, 0.0014080594992265105, 0.003460403997451067, 0.0023197601549327374, 0.0025210005696862936, 0.0020187802147120237, 0.0041564335115253925, 0.0043728826567530632, 0.0018875440582633018, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7052, 15039, -5308, 7889, -130, 5022, -11965, -19214, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00026339752366766334, 0.00012520077871158719, 0.00015215450548566878, 0.00011632025416474789, 0.00015671714209020138, 0.00014682652545161545, 0.00017097235831897706, 0.00012933567631989717, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -38,4,38,17,-35,-14,6,6,-47,-15,-67,-51,-20,-60,-13,-28,32,-40,36,46,-12,25,-33,13,4,-39,51,-7,-9,-22,10,16,74,25,31,-127,18,-3,-16,-26,-8,-3,37,44,33,-2,20,-2, 
  /* [1][0][][] */ 9,38,60,-22,-7,49,-49,-43,-7,18,-23,-81,12,109,-15,49,-25,19,-17,-53,9,-76,-36,31,-72,-6,-9,-111,-22,1,34,-70,37,64,-45,9,127,-32,3,64,-49,51,-80,-20,109,-17,-44,-21, 
  /* [2][0][][] */ 5,-31,-64,13,4,48,23,-5,-7,45,-5,24,63,-83,17,-57,36,-88,34,31,-20,49,-4,31,-15,65,-29,-61,23,17,13,-78,-54,-84,41,-22,106,14,-7,-52,-8,30,82,38,127,18,17,29, 
  /* [3][0][][] */ -16,34,-67,42,21,-49,-75,-99,14,-24,-41,5,13,20,45,79,-15,14,-32,33,1,-102,32,-61,-78,-6,127,-12,-51,4,-53,20,-8,-92,-2,-13,-29,-33,-21,90,-53,-38,5,14,36,10,-45,35, 
  /* [4][0][][] */ -23,-59,-19,11,34,-26,-16,-10,26,-34,58,-86,2,32,13,15,-14,-24,18,-18,-1,-49,5,-12,13,-12,43,46,43,28,-19,25,-17,-7,1,-3,-68,89,36,-23,31,-17,-17,-19,-84,24,127,19, 
  /* [5][0][][] */ 34,-17,-10,17,23,-42,29,-127,22,-23,-13,107,-80,65,14,-60,0,-82,11,15,-44,65,-37,-47,-64,64,-30,-1,-22,48,-33,-37,12,45,33,-5,-36,-2,-36,-40,11,-37,-50,1,-34,45,82,22, 
  /* [6][0][][] */ 57,-19,18,-12,-37,-22,-40,19,-35,13,-38,127,-47,-36,-4,45,9,46,13,24,37,-72,-22,4,32,38,-71,7,0,-46,10,33,12,27,-12,1,11,0,5,9,-1,-21,39,58,-4,-39,66,-12, 
  /* [7][0][][] */ -31,0,5,57,32,35,10,35,24,17,72,1,126,109,63,48,47,47,-9,4,26,-20,-82,-34,14,0,-24,79,34,-38,-30,-12,32,1,34,-97,-81,44,37,48,-28,36,92,127,-55,-32,-104,48, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.011194394901394844, 0.0053210328333079815, 0.0064665661193430424, 0.0049436106346547604, 0.0066604786552488804, 0.0062401271425187588, 0.007266324944794178, 0.0054967664182186127, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 7919, 4353, 8012, -1036, -1342, 892, 580, 30554, -892, 4010, 5804, 46166, -121, 4504, -943, 9701, -5054, 11037, 1677, 7151, 16496, 1407, 2432, -6822, 18285, 1823, -3435, 14934, -677, 107, -9863, 10368, 2680, 1484, 232, 6975, -8891, 16260, -288, 14569, -1285, -877, 5774, 2998, -299, 1272, 6818, -1112, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.7392170573584735e-05, 0.00017288090020883828, 0.00012581588816829026, 0.00015536647697445005, 0.00068940123310312629, 0.00016553177556488663, 0.00014888837176840752, 0.00014662151806987822, 0.00013467573444359004, 8.6064785136841238e-05, 6.8750981881748885e-05, 6.8466200900729746e-05, 9.634912566980347e-05, 6.8268382165115327e-05, 0.00020973179198335856, 0.00018918988644145429, 9.5039817097131163e-05, 0.00042861266410909593, 0.00012242842058185488, 0.00014531156921293586, 8.5512627265416086e-05, 0.00044354351121000946, 9.9570963357109576e-05, 0.0001805093779694289, 6.5280073613394052e-05, 8.1494967162143439e-05, 6.2300103309098631e-05, 8.3063110650982708e-05, 0.00017945343279279768, 0.0007442774367518723, 0.00017365407256875187, 0.00010400674364063889, 0.00011604391329456121, 0.00013770826626569033, 0.00016545857943128794, 5.8662975789047778e-05, 0.00010172171459998935, 4.0624476241646335e-05, 0.00011476052895886824, 6.3007668359205127e-05, 0.0001578575320309028, 0.00014387602277565747, 7.0328729634638876e-05, 8.7415050074923784e-05, 7.5949457823298872e-05, 0.0004178753006272018, 5.7884179113898426e-05, 0.00018929265206679702, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -67,-65,-19,-14,127,-74,86,-66,-104,-101,-2,-29,126,63,56,-107,59,-3,11,-67,-101,98,-33,28,6,127,124,-39,99,-77,33,-34,-70,-95,30,63,45,63,114,-68,-111,5,13,68,69,-127,99,108, -53,-68,-116,48,-64,112,123,-98,-93,50,76,-127,127,75,127,-57,-52,-63,18,-39,-116,48,-75,127,-114,89,88,-124,123,-58,-3,-127,-51,-70,68,121,98,66,100,-58,-127,-59,65,44,127,99,79,67, 38,-27,-105,104,-48,-38,32,-6,81,31,31,-71,19,33,-30,-11,-56,-12,31,-59,-57,2,-37,-29,-100,11,13,-92,32,53,127,-77,-20,2,-14,54,59,55,37,18,-14,81,75,12,58,27,9,-127, 
  /* [0][1][][] */ -105,-104,-43,-91,-67,-79,77,-107,-127,-127,87,-33,108,71,-111,-43,127,-127,-58,-74,-112,127,-48,24,-10,103,127,-80,-103,-87,12,-15,-65,-127,-127,59,59,73,9,-127,51,-20,59,127,111,93,123,-120, -127,-127,-127,-127,-15,127,127,-127,83,55,127,-103,105,127,77,-127,49,-80,-127,-127,-127,82,-127,97,-127,106,112,-127,-127,127,-28,-78,-127,-112,39,127,127,127,-10,-118,99,-121,127,78,126,-8,127,103, -26,-86,-118,124,67,-58,31,-26,66,29,-5,-73,2,34,79,-61,10,1,-19,-74,1,-2,-34,-41,-123,23,11,-117,-103,44,116,-66,-29,6,61,102,49,52,3,-20,54,127,70,-3,50,-50,36,30, 
  /* [0][2][][] */ -86,-20,4,60,-34,-18,-3,-42,77,-42,33,-32,32,37,-30,-5,-61,-26,88,-34,-94,-29,-68,-6,1,62,70,-45,64,59,-32,-3,-3,-93,-50,29,44,8,-93,-27,9,-13,55,72,20,37,3,-101, -24,-27,-37,-61,93,36,112,-41,111,23,-21,-63,22,34,-103,-101,37,9,24,-24,-64,76,-58,8,-66,19,96,-58,51,0,-50,-59,-40,-58,-67,79,24,23,-127,-51,5,-51,97,55,39,-114,23,-15, 30,7,-99,-6,-34,-29,6,-33,-76,7,-7,-20,-15,-12,67,-11,28,37,-29,-35,-80,-60,-7,-42,-49,-1,-19,-23,-12,-84,51,-3,-56,13,11,80,-9,31,-74,-37,14,54,29,-9,11,-19,13,66, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0041391672566533089, 0.0073474380187690258, 0.005347175057977438, 0.0066030751913785934, 0.029299551621079445, 0.0070351003669202328, 0.0063277557492256165, 0.0062314141541719437, 0.0057237185537815094, 0.0036577533464878798, 0.0029219167772680521, 0.002909813541918993, 0.004094837699085474, 0.0029014062602072954, 0.008913600817322731, 0.0080405697226524353, 0.0040391921065747738, 0.01821603812277317, 0.0052032079547643661, 0.0061757415533065796, 0.0036342865787446499, 0.018850598484277725, 0.0042317658662796021, 0.007671648170799017, 0.0027744029648602009, 0.0034635360352694988, 0.0026477542705833912, 0.0035301821772009134, 0.0076267705298960209, 0.031631790101528168, 0.0073802978731691837, 0.0044202865101397038, 0.0049318661913275719, 0.0058526010252535343, 0.0070319892838597298, 0.0024931763764470816, 0.0043231728486716747, 0.0017265402711927891, 0.0048773223534226418, 0.0026778257451951504, 0.0067089451476931572, 0.0061147306114435196, 0.0029889708384871483, 0.0037151395808905363, 0.0032278518192470074, 0.017759699374437332, 0.0024600776378065348, 0.0080449376255273819, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1408, -268, 24, 2314, 9347, 3387, -559, 5759, 1447, 1519, 405, 2688, 1749, 511, -675, 514, 2967, 9966, 2866, -750, 1758, -1897, 47, 2200, -260, -510, 2280, -131, 4343, 9860, 2907, 65, 497, -80, 1926, -309, 138, -388, 1810, 1130, 1112, 2332, 322, -354, 986, 2871, 898, -380, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00036238462780602276, 0.00037376643740572035, 0.00037797947879880667, 0.00022163668472785503, 0.00010381906758993864, 0.00023579130356665701, 0.00053591240430250764, 0.0001715600083116442, 0.00031079957261681557, 0.00049149809638038278, 0.00034742895513772964, 0.00032857208861969411, 0.00017953100905288011, 0.00034655552008189261, 0.00032110503525473177, 0.00030172659899108112, 0.00025929667754098773, 9.664446406532079e-05, 0.00024799196398817003, 0.00033534827525727451, 0.00029147687018848956, 0.0001702460867818445, 0.00049931235844269395, 0.00031146637047640979, 0.00041199917905032635, 0.00095452432287856936, 0.00026383667136542499, 0.00074771564686670899, 0.00020357372704893351, 9.489255171502009e-05, 0.00027401820989325643, 0.00073002104181796312, 0.00041889541898854077, 0.00038540680543519557, 0.00031569998827762902, 0.00033588238875381649, 0.00041150368633680046, 0.0006503259064629674, 0.00030302195227704942, 0.00046702503459528089, 0.00039212932460941374, 0.00029885841649957001, 0.00029010843718424439, 0.00041090554441325366, 0.00037912689731456339, 0.00021891387586947531, 0.00031143164960667491, 0.00028678079252131283, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -48,40,-6,-29,-66,-10,-127,54, 
  /* [1][0][][] */ 91,-81,-52,-79,127,-103,119,9, 
  /* [2][0][][] */ -75,127,-28,-124,44,-17,-17,35, 
  /* [3][0][][] */ 68,33,110,40,87,112,127,-9, 
  /* [4][0][][] */ -71,-127,54,-1,-53,-100,-16,-3, 
  /* [5][0][][] */ 127,-36,78,70,-60,-22,-6,-42, 
  /* [6][0][][] */ 27,22,127,-19,37,-32,-33,23, 
  /* [7][0][][] */ 25,10,-127,-30,-40,99,98,-64, 
  /* [8][0][][] */ 2,119,-5,-2,69,127,26,42, 
  /* [9][0][][] */ -12,127,-53,51,23,-95,42,97, 
  /* [10][0][][] */ -8,-127,-1,-47,-71,-122,-58,-77, 
  /* [11][0][][] */ -127,-89,101,42,-5,-67,96,61, 
  /* [12][0][][] */ -30,39,-127,71,47,-72,-84,88, 
  /* [13][0][][] */ 89,-127,88,79,12,28,23,-58, 
  /* [14][0][][] */ -70,121,-35,-127,-35,-95,-36,-46, 
  /* [15][0][][] */ 57,101,43,-20,34,-50,102,-127, 
  /* [16][0][][] */ -99,-127,-68,75,-32,23,-15,69, 
  /* [17][0][][] */ -22,-60,-127,63,-27,76,-23,88, 
  /* [18][0][][] */ -88,-105,-75,101,14,99,18,127, 
  /* [19][0][][] */ 74,-122,92,-127,29,-57,37,-42, 
  /* [20][0][][] */ -3,104,24,13,74,127,85,-23, 
  /* [21][0][][] */ 29,96,53,-22,38,-64,84,-127, 
  /* [22][0][][] */ 20,10,78,17,-1,127,24,-23, 
  /* [23][0][][] */ -61,-64,41,-43,79,93,-19,-127, 
  /* [24][0][][] */ -117,-86,28,-99,123,105,-47,-127, 
  /* [25][0][][] */ 127,2,-53,-10,14,47,-59,-7, 
  /* [26][0][][] */ -127,-30,-121,-33,-42,-32,18,-13, 
  /* [27][0][][] */ 87,26,-17,-36,-127,-14,97,93, 
  /* [28][0][][] */ -111,-84,27,16,-64,-127,-15,-4, 
  /* [29][0][][] */ 101,66,17,-127,65,10,-22,-83, 
  /* [30][0][][] */ -52,-62,39,-35,59,70,-24,-127, 
  /* [31][0][][] */ 50,44,-7,127,6,-72,10,3, 
  /* [32][0][][] */ -15,127,0,33,22,71,-1,39, 
  /* [33][0][][] */ -35,127,-70,16,5,-52,-14,3, 
  /* [34][0][][] */ -112,-97,-27,127,-18,-4,8,97, 
  /* [35][0][][] */ -45,127,-26,9,52,106,52,83, 
  /* [36][0][][] */ 94,32,6,-50,-123,-29,127,119, 
  /* [37][0][][] */ -58,98,28,26,-127,115,-12,-95, 
  /* [38][0][][] */ 37,49,46,15,127,68,108,59, 
  /* [39][0][][] */ -17,-81,43,-11,-2,51,-78,127, 
  /* [40][0][][] */ -68,-30,-78,127,-17,1,11,51, 
  /* [41][0][][] */ 106,9,64,127,-40,-35,-22,-29, 
  /* [42][0][][] */ -50,-1,-79,-127,65,-123,-8,69, 
  /* [43][0][][] */ 25,-5,84,3,37,127,84,5, 
  /* [44][0][][] */ -17,-20,-57,127,49,6,-26,-41, 
  /* [45][0][][] */ 48,90,95,-127,79,-56,30,-96, 
  /* [46][0][][] */ -27,-127,-28,35,-22,40,-52,111, 
  /* [47][0][][] */ 51,64,92,1,127,89,120,7, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0038012301083654165, 0.0039206193760037422, 0.0039648120291531086, 0.0023248558863997459, 0.0010890091070905328, 0.0024733305908739567, 0.0056214476935565472, 0.0017995770322158933, 0.0032601291313767433, 0.0051555642858147621, 0.0036443525459617376, 0.0034465538337826729, 0.0018831887282431126, 0.0036351908929646015, 0.0033682282082736492, 0.0031649582087993622, 0.0027198900934308767, 0.0010137511417269707, 0.0026013094466179609, 0.0035176323726773262, 0.0030574437696486712, 0.0017857947386801243, 0.0052375318482518196, 0.0032671235967427492, 0.0043216613121330738, 0.010012473911046982, 0.0027675123419612646, 0.0078431563451886177, 0.0021353845950216055, 0.0009953745175153017, 0.0028743112925440073, 0.0076575484126806259, 0.0043939994648098946, 0.0040427208878099918, 0.0033115318510681391, 0.0035232352092862129, 0.0043164640665054321, 0.0068215872161090374, 0.0031785457395017147, 0.0048988545313477516, 0.0041132369078695774, 0.0031348725315183401, 0.0030430897604674101, 0.0043101897463202477, 0.0039768479764461517, 0.0022962950170040131, 0.0032667592167854309, 0.0030081842560321093, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7642, -2441, 12362, -10573, 23028, 7218, -9048, 10777, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00015927955973893404, 0.00021042913431301713, 0.00017106549057643861, 0.0002289378026034683, 0.00016522016085218638, 0.00016967476403806359, 0.00015753958723507822, 0.00027985937776975334, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -13,-11,-15,-72,-36,-44,15,-25,46,-6,-21,-10,110,127,-12,-104, 
  /* [1][0][][] */ 127,-60,-40,18,-46,60,-71,-46,-32,80,-23,-60,-7,3,-46,-15, 
  /* [2][0][][] */ -41,-92,41,38,57,-56,-74,-18,42,-97,39,-127,48,-22,-71,25, 
  /* [3][0][][] */ 35,-6,15,24,-18,70,-54,-16,127,58,1,24,7,-18,5,15, 
  /* [4][0][][] */ -98,-60,-35,-127,1,40,70,-122,50,-26,-55,-51,-120,28,-51,-15, 
  /* [5][0][][] */ 97,50,70,-36,49,-47,-127,-126,-15,-64,64,53,-50,48,64,-48, 
  /* [6][0][][] */ 97,39,-127,-65,35,-64,2,-87,-34,22,-108,81,82,-75,7,55, 
  /* [7][0][][] */ -127,-2,99,-26,-73,3,-1,-56,-54,60,89,-23,66,-25,34,30, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0067693809978663921, 0.0089432382956147194, 0.0072702830657362938, 0.0097298566251993179, 0.0070218564942479134, 0.0072111771441996098, 0.0066954325884580612, 0.011894023045897484, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 16269, -338, -186, 2673, -445, 301, 11752, 672, -417, 76, -1449, 4019, 4281, 810, -422, -2415, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00014415776240639389, 0.00023018485808279365, 0.00015014820382930338, 0.00016684031288605183, 0.00087876612087711692, 0.00062456895830109715, 0.00016338675050064921, 0.00097935809753835201, 0.00039397960063070059, 0.0010654627112671733, 0.0003302133409306407, 0.00021324541012290865, 0.0001009158295346424, 0.00030432629864662886, 0.00024913536617532372, 0.00022104446543380618, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,10,-2,9,-22,11,-4,20,-12,-10,-7,-4,-6,-11,5,2, 0,-11,13,8,12,-1,1,-24,-14,9,-12,81,-9,17,3,5, -1,-18,7,1,2,-13,-8,11,-3,2,-13,-9,-11,-11,-8,3, 
  /* [0][1][][] */ -4,-8,12,12,127,-23,-127,-19,127,127,-8,-3,115,-29,-4,-18, -127,127,127,5,-94,-90,-20,-100,13,-104,127,127,127,127,127,127, 15,-11,-5,6,-13,127,2,-9,0,-12,-3,-11,-3,-10,-20,-6, 
  /* [0][2][][] */ -10,-8,10,-14,-20,15,38,9,-15,-6,-10,-1,-5,-4,-10,-9, 13,-21,2,-127,6,-15,-13,127,-3,3,-6,-8,-6,-64,-5,-32, 2,-1,3,5,0,-4,-2,-1,3,3,-16,-5,-16,-12,-20,-6, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0061267050914466381, 0.0097828563302755356, 0.0063812984153628349, 0.0070907128974795341, 0.037347558885812759, 0.026544179767370224, 0.0069439364597201347, 0.041622716933488846, 0.016744133085012436, 0.045282166451215744, 0.014034067280590534, 0.0090629300102591515, 0.0042889225296676159, 0.012933867983520031, 0.010588252916932106, 0.0093943895772099495, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 3256, 1209, 209, 3940, 40928, 38057, 8510, -16701, 8667, -7071, 735, -23, 3213, -33269, -2324, 54098, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00020462730026338249, 0.00077945354860275984, 0.00019521392823662609, 0.00013099379430059344, 4.7876001190161332e-05, 4.8082834837259725e-05, 0.00011652243119897321, 3.2207120966631919e-05, 0.00012141560728196055, 3.86098436138127e-05, 0.00042159110307693481, 0.00058593141147866845, 0.00026502987020649016, 2.1256309992168099e-05, 0.00048158550634980202, 5.3703530284110457e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -87, -111, -35, 
  /* [0][1][][] */ 66, -38, 12, 
  /* [0][2][][] */ 31, 127, 15, 
  /* [1][0][][] */ 104, -95, -12, 
  /* [1][1][][] */ -127, 102, 21, 
  /* [1][2][][] */ 13, -2, -14, 
  /* [2][0][][] */ -25, -3, -49, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -13, -95, -80, 
  /* [3][0][][] */ 116, 121, 55, 
  /* [3][1][][] */ -1, -24, -16, 
  /* [3][2][][] */ -102, -127, -44, 
  /* [4][0][][] */ 40, -50, 13, 
  /* [4][1][][] */ 42, -127, 20, 
  /* [4][2][][] */ 15, -95, 12, 
  /* [5][0][][] */ -62, 28, 9, 
  /* [5][1][][] */ -127, 36, 16, 
  /* [5][2][][] */ -70, 37, 14, 
  /* [6][0][][] */ -18, 80, 127, 
  /* [6][1][][] */ -55, 56, -19, 
  /* [6][2][][] */ -40, -54, -91, 
  /* [7][0][][] */ 25, 14, -12, 
  /* [7][1][][] */ 127, 64, -7, 
  /* [7][2][][] */ 54, 24, -13, 
  /* [8][0][][] */ -22, -32, 52, 
  /* [8][1][][] */ -55, -88, 127, 
  /* [8][2][][] */ -27, -63, 96, 
  /* [9][0][][] */ -15, 61, -9, 
  /* [9][1][][] */ -10, 127, -13, 
  /* [9][2][][] */ -2, 72, -20, 
  /* [10][0][][] */ 26, 87, 10, 
  /* [10][1][][] */ -36, -127, -31, 
  /* [10][2][][] */ 13, 41, 16, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -39, 53, -7, 
  /* [12][1][][] */ -127, 119, 9, 
  /* [12][2][][] */ -77, 84, 8, 
  /* [13][0][][] */ 61, -2, -31, 
  /* [13][1][][] */ 127, 96, -7, 
  /* [13][2][][] */ 75, 88, 32, 
  /* [14][0][][] */ -28, -26, 50, 
  /* [14][1][][] */ 47, 101, -127, 
  /* [14][2][][] */ -15, -70, 83, 
  /* [15][0][][] */ -74, -1, 54, 
  /* [15][1][][] */ -127, -94, 41, 
  /* [15][2][][] */ -37, -83, -7, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.052736487239599228, 0.20088052749633789, 0.050310473889112473, 0.033759679645299911, 0.012338588945567608, 0.012391893193125725, 0.030030125752091408, 0.0083004096522927284, 0.031291194260120392, 0.0099505167454481125, 0.10865233093500137, 0.1510060727596283, 0.068303421139717102, 0.0054781697690486908, 0.12411407381296158, 0.013840457424521446, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.095333516597747803, } };
const TfArray<1, int> quant46_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.07759442925453186, } };
const TfArray<1, int> quant50_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.073833703994750977, } };
const TfArray<1, int> quant53_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10255390405654907, } };
const TfArray<1, int> quant54_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.052526533603668213, } };
const TfArray<1, int> quant58_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.022961141541600227, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.05678924173116684, } };
const TfArray<1, int> quant61_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.079817570745944977, } };
const TfArray<1, int> quant62_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.04508233442902565, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.10281080007553101, } };
const TfArray<1, int> quant66_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.049476869404315948, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.080031722784042358, } };
const TfArray<1, int> quant69_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
